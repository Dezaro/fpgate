//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package TremolZFP;

import java.util.Date;

public class FP extends FPcore {
     public FP(){
        this.setVersionDef(1906120933);
    }

    /**
     *Provides information about the amounts on hand by type of payment.
     * @return DailyAvailableAmountsRes
     * @throws java.lang.Exception
     */
     public DailyAvailableAmountsRes ReadDailyAvailableAmounts() throws Exception {
             return CreateRes(Do("ReadDailyAvailableAmounts"), DailyAvailableAmountsRes.class);
     }

    /**
     *Provides information about the PO amounts by type of payment and the total number of operations. Command works for KL version 2 devices.
     * @return DailyPO_OldRes
     * @throws java.lang.Exception
     */
     public DailyPO_OldRes ReadDailyPO_Old() throws Exception {
             return CreateRes(Do("ReadDailyPO_Old"), DailyPO_OldRes.class);
     }

    /**
     *Prints an article report with or without zeroing ('Z' or 'X').
     * @param  optionZeroing
     *         with following values: 
     *  - 'Z' - Zeroing 
     *  - 'X' - Without zeroing
     * @throws java.lang.Exception
     */
     public void PrintArticleReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintArticleReport", "OptionZeroing", optionZeroing);
     }

    /**
     *Provides information about the current (the last value stored into the FM) decimal point format.
     * @return DecimalPoint
     * @throws java.lang.Exception
     */
     public DecimalPoint ReadDecimalPoint() throws Exception {
             return CreateRes(Do("ReadDecimalPoint"), DecimalPoint.class);
     }

    /**
     *Programs the number of POS, printing of logo, cash drawer opening, cutting permission, external display management mode, article report type, enable or disable currency in receipt, EJ font type and working operators counter.
     * @param  pOSNum
     *         4 symbols for number of POS in format ####
     * @param  optionPrintLogo
     *         1 symbol of value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionAutoOpenDrawer
     *         1 symbol of value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionAutoCut
     *         1 symbol of value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionExternalDispManagement
     *         1 symbol of value: 
     *  - '1' - Manual 
     *  - '0' - Auto
     * @param  optionArticleReportType
     *         1 symbol of value: 
     *  - '1' - Detailed 
     *  - '0' - Brief
     * @param  optionEnableCurrency
     *         1 symbol of value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionEJFontType
     *         1 symbol of value: 
     *  - '1' - Low Font 
     *  - '0' - Normal Font
     * @param  optionWorkOperatorCount
     *         1 symbol of value: 
     *  - '1' - One 
     *  - '0' - More
     * @throws java.lang.Exception
     */
     public void ProgParameters(Double pOSNum, OptionPrintLogo optionPrintLogo, OptionAutoOpenDrawer optionAutoOpenDrawer, OptionAutoCut optionAutoCut, OptionExternalDispManagement optionExternalDispManagement, OptionArticleReportType optionArticleReportType, OptionEnableCurrency optionEnableCurrency, OptionEJFontType optionEJFontType, OptionWorkOperatorCount optionWorkOperatorCount) throws Exception {
             Do("ProgParameters", "POSNum", pOSNum, "OptionPrintLogo", optionPrintLogo, "OptionAutoOpenDrawer", optionAutoOpenDrawer, "OptionAutoCut", optionAutoCut, "OptionExternalDispManagement", optionExternalDispManagement, "OptionArticleReportType", optionArticleReportType, "OptionEnableCurrency", optionEnableCurrency, "OptionEJFontType", optionEJFontType, "OptionWorkOperatorCount", optionWorkOperatorCount);
     }

    /**
     *Provides information about last sent receipt number and date time to NRA server and first unsent receipt number and date time to NRA. If there is no unsent receipt the number will be 0 and date time will be 00-00-0000 00:00 Parameter NRA_ErrorMessage provide error message from NRA server if exist. Command is not allowed if device is deregistered, not fiscalized or in opened receipt.
     * @return SentRcpInfoStatusRes
     * @throws java.lang.Exception
     */
     public SentRcpInfoStatusRes ReadSentRcpInfoStatus() throws Exception {
             return CreateRes(Do("ReadSentRcpInfoStatus"), SentRcpInfoStatusRes.class);
     }

    /**
     *Print Electronic Journal Report from receipt number to receipt number and selected documents content. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
     * @param  flagsReceipts
     *         1 symbol for Receipts included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=1 Yes, Flags.5=0 No (Include PO) 
     * Flags.4=1 Yes, Flags.4=0 No (Include RA) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)
     * @param  flagsReports
     *         1 symbol for Reports included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=0 
     * Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)
     * @param  startRcpNum
     *         6 symbols for initial receipt number included in report in format ######.
     * @param  endRcpNum
     *         6 symbols for final receipt number included in report in format ######.
     * @throws java.lang.Exception
     */
     public void PrintEJByRcpNumCustom(byte flagsReceipts, byte flagsReports, Double startRcpNum, Double endRcpNum) throws Exception {
             Do("PrintEJByRcpNumCustom", "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartRcpNum", startRcpNum, "EndRcpNum", endRcpNum);
     }

    /**
     *Provides information for the programmed data, the turnover from the stated department number
     * @param  depNum
     *         2 symbols for department number in format: ##
     * @return DepartmentRes
     * @throws java.lang.Exception
     */
     public DepartmentRes ReadDepartment(Double depNum) throws Exception {
             return CreateRes(Do("ReadDepartment", "DepNum", depNum), DepartmentRes.class);
     }

    /**
     *Opens an electronic fiscal invoice receipt with 1 minute timeout assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  recipient
     *         26 symbols for Invoice recipient
     * @param  buyer
     *         16 symbols for Invoice buyer
     * @param  vATNumber
     *         13 symbols for customer Fiscal number
     * @param  uIC
     *         13 symbols for customer Unique Identification Code
     * @param  address
     *         30 symbols for Address
     * @param  optionUICType
     *         1 symbol for type of Unique Identification Code:  
     *  - '0' - Bulstat 
     *  - '1' - EGN 
     *  - '2' - Foreigner Number 
     *  - '3' - NRA Official Number
     * @param  uniqueReceiptNumber
     *         Up to 24 symbols for unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenElectronicInvoiceWithFreeCustomerData(Double operNum, String operPass, String recipient, String buyer, String vATNumber, String uIC, String address, OptionUICType optionUICType, String uniqueReceiptNumber) throws Exception {
             Do("OpenElectronicInvoiceWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "Recipient", recipient, "Buyer", buyer, "VATNumber", vATNumber, "UIC", uIC, "Address", address, "OptionUICType", optionUICType, "UniqueReceiptNumber", uniqueReceiptNumber);
     }

    /**
     *Read the total counter of last issued receipt.
     * @return Double
     * @throws java.lang.Exception
     */
     public Double ReadLastReceiptNum() throws Exception {
             return CreateRes(Do("ReadLastReceiptNum"), Double.class);
     }

    /**
     *Stores the Unique Identification Code (UIC) and UIC type into the operative memory.
     * @param  password
     *         6-symbols string
     * @param  uIC
     *         13 symbols for UIC
     * @param  optionUICType
     *         1 symbol for type of UIC number:  
     *  - '0' - Bulstat 
     *  - '1' - EGN 
     *  - '2' - Foreigner Number 
     *  - '3' - NRA Official Number
     * @throws java.lang.Exception
     */
     public void SetCustomerUIC(String password, String uIC, OptionUICType optionUICType) throws Exception {
             Do("SetCustomerUIC", "Password", password, "UIC", uIC, "OptionUICType", optionUICType);
     }

    /**
     *Read Electronic Journal Report from receipt number to receipt number.
     * @param  optionReportFormat
     *         1 character with value 
     *  - 'J0' - Detailed EJ 
     *  - 'J8' - Brief EJ
     * @param  startRcpNum
     *         6 symbols for initial receipt number included in report in format ######
     * @param  endRcpNum
     *         6 symbols for final receipt number included in report in format ######
     * @throws java.lang.Exception
     */
     public void ReadEJByReceiptNum(OptionReportFormat optionReportFormat, Double startRcpNum, Double endRcpNum) throws Exception {
             Do("ReadEJByReceiptNum", "OptionReportFormat", optionReportFormat, "StartRcpNum", startRcpNum, "EndRcpNum", endRcpNum);
     }

    /**
     *Programs the general data for a certain article in the internal database. The price may have variable length, while the name field is fixed.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  name
     *         34 symbols for article name
     * @param  price
     *         Up to 10 symbols for article price
     * @param  optionPrice
     *         1 symbol for price flag with next value: 
     *  - '0'- Free price is disable valid only programmed price 
     *  - '1'- Free price is enable 
     *  - '2'- Limited price
     * @param  optionVATClass
     *         1 character for VAT class: 
     *  - 'А' - VAT Class 0 
     *  - 'Б' - VAT Class 1 
     *  - 'В' - VAT Class 2 
     *  - 'Г' - VAT Class 3 
     *  - 'Д' - VAT Class 4 
     *  - 'Е' - VAT Class 5 
     *  - 'Ж' - VAT Class 6 
     *  - 'З' - VAT Class 7 
     *  - '*' - Forbidden
     * @param  belongToDepNum
     *         BelongToDepNum + 80h, 1 symbol for article 
     * department attachment, formed in the following manner: 
     * BelongToDepNum[HEX] + 80h example: Dep01 = 81h, Dep02 = 82h … 
     * Dep19 = 93h
     * @param  optionSingleTransaction
     *         1 symbol with value: 
     *  - '0' - Inactive, default value 
     *  - '1' - Active Single transaction in receipt
     * @throws java.lang.Exception
     */
     public void ProgPLUgeneral(Double pLUNum, String name, Double price, OptionPrice optionPrice, OptionVATClass optionVATClass, int belongToDepNum, OptionSingleTransaction optionSingleTransaction) throws Exception {
             Do("ProgPLUgeneral", "PLUNum", pLUNum, "Name", name, "Price", price, "OptionPrice", optionPrice, "OptionVATClass", optionVATClass, "BelongToDepNum", belongToDepNum, "OptionSingleTransaction", optionSingleTransaction);
     }

    /**
     *Percent or value discount/addition over sum of transaction or over subtotal sum specified by field "Type".
     * @param  optionType
     *         1 symbol with value  
     * - '2' - Defined from the device  
     * - '1' - Over subtotal 
     * - '0' - Over transaction sum
     * @param  optionSubtotal
     *         1 symbol with value  
     *  - '1' - Yes  
     *  - '0' - No
     * @param  discAddV
     *         Up to 8 symbols for the value of the discount/addition. 
     * Use minus sign '-' for discount
     * @param  discAddP
     *         Up to 7 symbols for the percentage value of the 
     * discount/addition. Use minus sign '-' for discount
     * @throws java.lang.Exception
     */
     public void PrintDiscountOrAddition(OptionType optionType, OptionSubtotal optionSubtotal, Double discAddV, Double discAddP) throws Exception {
             Do("PrintDiscountOrAddition", "OptionType", optionType, "OptionSubtotal", optionSubtotal, "DiscAddV", discAddV, "DiscAddP", discAddP);
     }

    /**
     *Preprogram the name of the type of payment. Command works for KL version 2 devices.
     * @param  optionNumber
     *         1 symbol for payment type  
     *  - '1' - Payment 1 
     *  - '2' - Payment 2 
     *  - '3' - Payment 3 
     *  - '4' - Payment 4
     * @param  name
     *         10 symbols for payment type name
     * @param  rate
     *         Up to 10 symbols for exchange rate in format: ####.##### 
     * of the 4th payment type, maximal value 0420.00000
     * @param  optionCodePayment
     *         1 symbol for code payment type with name: 
     *  - '1' - Check  
     *  - '2' - Talon 
     *  - '3' - V. Talon 
     *  - '4' - Packaging 
     *  - '5' - Service 
     *  - '6' - Damage 
     *  - '7' - Card 
     *  - '8' - Bank 
     *  - '9' - Programming Name1 
     *  - ':' - Programming Name2
     * @throws java.lang.Exception
     */
     public void ProgPayment_Old(OptionNumber optionNumber, String name, Double rate, OptionCodePayment optionCodePayment) throws Exception {
             Do("ProgPayment_Old", "OptionNumber", optionNumber, "Name", name, "Rate", rate, "OptionCodePayment", optionCodePayment);
     }

    /**
     *Print or store Electronic Journal report with all documents.
     * @param  optionReportStorage
     *         1 character with value: 
     *  - 'J1' - Printing 
     *  - 'J2' - USB storage 
     *  - 'J4' - SD card storage
     * @throws java.lang.Exception
     */
     public void PrintOrStoreEJ(OptionReportStorage optionReportStorage) throws Exception {
             Do("PrintOrStoreEJ", "OptionReportStorage", optionReportStorage);
     }

    /**
     *Opens the cash drawer.
     * @throws java.lang.Exception
     */
     public void CashDrawerOpen() throws Exception {
             Do("CashDrawerOpen");
     }

    /**
     *Provides information about the registers of the specified article.
     * @param  pLUNum
     *         5 symbols for article number in format #####
     * @return PLU_OldRes
     * @throws java.lang.Exception
     */
     public PLU_OldRes ReadPLU_Old(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLU_Old", "PLUNum", pLUNum), PLU_OldRes.class);
     }

    /**
     *Print a detailed FM payments report by initial and end FM report number.
     * @param  startZNum
     *         4 symbols for initial FM report number included in report, format ####
     * @param  endZNum
     *         4 symbols for final FM report number included in report, format ####
     * @throws java.lang.Exception
     */
     public void PrintDetailedFMPaymentsReportByZBlocks(Double startZNum, Double endZNum) throws Exception {
             Do("PrintDetailedFMPaymentsReportByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
     }

    /**
     *Shows a 20-symbols text in the first line and last 20-symbols text in the second line of the external display lines.
     * @param  text
     *         40 symbols text
     * @throws java.lang.Exception
     */
     public void DisplayTextLines1and2(String text) throws Exception {
             Do("DisplayTextLines1and2", "Text", text);
     }

    /**
     *Register the sell or correction with specified quantity of article from the internal FD database. The FD will perform a correction operation only if the same quantity of the article has already been sold.
     * @param  optionSign
     *         1 symbol with optional value: 
     *  - '+' -Sale 
     *  - '-' - Correction
     * @param  pLUNum
     *         5 symbols for PLU number of FD's database in format #####
     * @param  price
     *         Up to 10 symbols for sale price
     * @param  quantity
     *         Up to 10 symbols for article's quantity sold
     * @param  discAddP
     *         Up to 7 for percentage of discount/addition. Use minus 
     * sign '-' for discount
     * @param  discAddV
     *         Up to 8 symbolsfor percentage of discount/addition. 
     * Use minus sign '-' for discount
     * @throws java.lang.Exception
     */
     public void SellPLUFromFD_DB(OptionSign optionSign, Double pLUNum, Double price, Double quantity, Double discAddP, Double discAddV) throws Exception {
             Do("SellPLUFromFD_DB", "OptionSign", optionSign, "PLUNum", pLUNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
     }

    /**
     *Provides information about the current date and time.
     * @return Date
     * @throws java.lang.Exception
     */
     public Date ReadDateTime() throws Exception {
             return CreateRes(Do("ReadDateTime"), Date.class);
     }

    /**
     *Register the payment in the receipt with specified type of payment and exact amount received.
     * @param  optionPaymentType
     *         1 symbol for payment type: 
     *  - '0' - Payment 0 
     *  - '1' - Payment 1 
     *  - '2' - Payment 2 
     *  - '3' - Payment 3 
     *  - '4' - Payment 4 
     *  - '5' - Payment 5 
     *  - '6' - Payment 6 
     *  - '7' - Payment 7 
     *  - '8' - Payment 8 
     *  - '9' - Payment 9 
     *  - '10' - Payment 10 
     *  - '11' - Payment 11
     * @throws java.lang.Exception
     */
     public void PayExactSum(OptionPaymentType optionPaymentType) throws Exception {
             Do("PayExactSum", "OptionPaymentType", optionPaymentType);
     }

    /**
     *Read the number of the remaining free records for Z-report in the Fiscal Memory.
     * @return String
     * @throws java.lang.Exception
     */
     public String ReadFMfreeRecords() throws Exception {
             return CreateRes(Do("ReadFMfreeRecords"), String.class);
     }

    /**
     *Available only if receipt is not closed. Void all sales in the receipt and close the fiscal receipt (Fiscal receipt, Invoice receipt, Storno receipt or Credit Note). If payment is started, then finish payment and close the receipt.
     * @throws java.lang.Exception
     */
     public void CancelReceipt() throws Exception {
             Do("CancelReceipt");
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article belonging to department with specified name, price, quantity and/or discount/addition on the transaction. The VAT of article got from department to which article belongs.
     * @param  namePLU
     *         36 symbols for article's name. 34 symbols are printed on paper. 
     * Symbol 0x7C '|' is new line separator.
     * @param  price
     *         Up to 10 symbols for article's price. Use minus sign '-' for correction
     * @param  quantity
     *         Up to 10 symbols for quantity
     * @param  discAddP
     *         Up to 7 symbols for percentage of discount/addition. 
     * Use minus sign '-' for discount
     * @param  discAddV
     *         Up to 8 symbols for value of discount/addition. 
     * Use minus sign '-' for discount
     * @param  depNum
     *         1 symbol for article department 
     * attachment, formed in the following manner; example: Dep01=81h, 
     * Dep02=82h … Dep19=93h
     * @throws java.lang.Exception
     */
     public void SellPLUfromDep(String namePLU, Double price, Double quantity, Double discAddP, Double discAddV, int depNum) throws Exception {
             Do("SellPLUfromDep", "NamePLU", namePLU, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
     }

    /**
     *Provide information about invoice start and end numbers range.
     * @return InvoiceRangeRes
     * @throws java.lang.Exception
     */
     public InvoiceRangeRes ReadInvoiceRange() throws Exception {
             return CreateRes(Do("ReadInvoiceRange"), InvoiceRangeRes.class);
     }

    /**
     *Print whole special FM events report.
     * @throws java.lang.Exception
     */
     public void PrintSpecialEventsFMreport() throws Exception {
             Do("PrintSpecialEventsFMreport");
     }

    /**
     *Open a fiscal storno receipt assigned to the specified operator number and operator password, parameters for receipt format, print VAT, printing type and parameters for the related storno receipt.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionReceiptFormat
     *         1 symbol with value: 
     *  - '1' - Detailed 
     *  - '0' - Brief
     * @param  optionPrintVAT
     *         1 symbol with value:  
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionStornoRcpPrintType
     *         1 symbol with value: 
     * - '@' - Step by step printing 
     * - 'B' - Postponed Printing 
     * - 'D' - Buffered Printing
     * @param  optionStornoReason
     *         1 symbol for reason of storno operation with value:  
     * - '0' - Operator error  
     * - '1' - Goods Claim or Goods return  
     * - '2' - Tax relief
     * @param  relatedToRcpNum
     *         Up to 6 symbols for issued receipt number
     * @param  relatedToRcpDateTime
     *         17 symbols for Date and Time of the issued receipt 
     * in format DD-MM-YY HH:MM:SS
     * @param  fMNum
     *         8 symbols for number of the Fiscal Memory
     * @param  relatedToURN
     *         Up to 24 symbols for the issed receipt unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenStornoReceipt(Double operNum, String operPass, OptionReceiptFormat optionReceiptFormat, OptionPrintVAT optionPrintVAT, OptionStornoRcpPrintType optionStornoRcpPrintType, OptionStornoReason optionStornoReason, Double relatedToRcpNum, Date relatedToRcpDateTime, String fMNum, String relatedToURN) throws Exception {
             Do("OpenStornoReceipt", "OperNum", operNum, "OperPass", operPass, "OptionReceiptFormat", optionReceiptFormat, "OptionPrintVAT", optionPrintVAT, "OptionStornoRcpPrintType", optionStornoRcpPrintType, "OptionStornoReason", optionStornoReason, "RelatedToRcpNum", relatedToRcpNum, "RelatedToRcpDateTime", relatedToRcpDateTime, "FMNum", fMNum, "RelatedToURN", relatedToURN);
     }

    /**
     *Programs the operator's name and password.
     * @param  number
     *         Symbols from '1' to '20' corresponding to operator's number
     * @param  name
     *         20 symbols for operator's name
     * @param  password
     *         6 symbols for operator's password
     * @throws java.lang.Exception
     */
     public void ProgOperator(Double number, String name, String password) throws Exception {
             Do("ProgOperator", "Number", number, "Name", name, "Password", password);
     }

    /**
     *Provides information about all programmed types of payment. Command works for KL version 2 devices.
     * @return Payments_OldRes
     * @throws java.lang.Exception
     */
     public Payments_OldRes ReadPayments_Old() throws Exception {
             return CreateRes(Do("ReadPayments_Old"), Payments_OldRes.class);
     }

    /**
     *Print Electronic Journal Report by initial and end date, and selected documents content. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
     * @param  flagsReceipts
     *         1 symbol for Receipts included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=1 Yes, Flags.5=0 No (Include PO) 
     * Flags.4=1 Yes, Flags.4=0 No (Include RA) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)
     * @param  flagsReports
     *         1 symbol for Reports included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=0 
     * Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)
     * @param  startRepFromDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endRepFromDate
     *         6 symbols for final date in the DDMMYY format
     * @throws java.lang.Exception
     */
     public void PrintEJByDateCustom(byte flagsReceipts, byte flagsReports, Date startRepFromDate, Date endRepFromDate) throws Exception {
             Do("PrintEJByDateCustom", "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
     }

    /**
     *Provides information about the quantity registers of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUqtyRes
     * @throws java.lang.Exception
     */
     public PLUqtyRes ReadPLUqty(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUqty", "PLUNum", pLUNum), PLUqtyRes.class);
     }

    /**
     *Provides information about the manufacturing number of the fiscal device and FM number.
     * @return SerialAndFiscalNumsRes
     * @throws java.lang.Exception
     */
     public SerialAndFiscalNumsRes ReadSerialAndFiscalNums() throws Exception {
             return CreateRes(Do("ReadSerialAndFiscalNums"), SerialAndFiscalNumsRes.class);
     }

    /**
     *Registers cash received on account or paid out.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to the operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  amount
     *         Up to 10 symbols for the amount lodged. Use minus sign for withdrawn
     * @param  optionPrintAvailability
     *         1 symbol with value: 
     *  - '0' - No 
     *  - '1' - Yes
     * @param  text
     *         TextLength-2 symbols. In the beginning and in the end of line symbol '#' 
     * is printed.
     * @throws java.lang.Exception
     */
     public void ReceivedOnAccount_PaidOut(Double operNum, String operPass, Double amount, OptionPrintAvailability optionPrintAvailability, String text) throws Exception {
             Do("ReceivedOnAccount_PaidOut", "OperNum", operNum, "OperPass", operPass, "Amount", amount, "OptionPrintAvailability", optionPrintAvailability, "Text", text);
     }

    /**
     *Open an electronic fiscal storno receipt with 1 minute timeout assigned to the specified operator number and operator password, parameters for receipt format, print VAT, printing type and parameters for the related storno receipt.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionReceiptFormat
     *         1 symbol with value: 
     *  - '1' - Detailed 
     *  - '0' - Brief
     * @param  optionPrintVAT
     *         1 symbol with value:  
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionStornoReason
     *         1 symbol for reason of storno operation with value:  
     * - '0' - Operator error  
     * - '1' - Goods Claim or Goods return  
     * - '2' - Tax relief
     * @param  relatedToRcpNum
     *         Up to 6 symbols for issued receipt number
     * @param  relatedToRcpDateTime
     *         17 symbols for Date and Time of the issued receipt 
     * in format DD-MM-YY HH:MM:SS
     * @param  fMNum
     *         8 symbols for number of the Fiscal Memory
     * @param  relatedToURN
     *         Up to 24 symbols for the issed receipt unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenElectronicStornoReceipt(Double operNum, String operPass, OptionReceiptFormat optionReceiptFormat, OptionPrintVAT optionPrintVAT, OptionStornoReason optionStornoReason, Double relatedToRcpNum, Date relatedToRcpDateTime, String fMNum, String relatedToURN) throws Exception {
             Do("OpenElectronicStornoReceipt", "OperNum", operNum, "OperPass", operPass, "OptionReceiptFormat", optionReceiptFormat, "OptionPrintVAT", optionPrintVAT, "OptionStornoReason", optionStornoReason, "RelatedToRcpNum", relatedToRcpNum, "RelatedToRcpDateTime", relatedToRcpDateTime, "FMNum", fMNum, "RelatedToURN", relatedToURN);
     }

    /**
     *Executes the direct command .
     * @param  input
     *         Raw request to FP
     * @return String
     * @throws java.lang.Exception
     */
     public String DirectCommand(String input) throws Exception {
             return CreateRes(Do("DirectCommand", "Input", input), String.class);
     }

    /**
     *Reading Electronic Journal Report by number of Z report blocks.
     * @param  optionReportFormat
     *         1 character with value 
     *  - 'J0' - Detailed EJ 
     *  - 'J8' - Brief EJ
     * @param  startNo
     *         4 symbols for initial number report in format ####
     * @param  endNo
     *         4 symbols for final number report in format ####
     * @throws java.lang.Exception
     */
     public void ReadEJByZBlocks(OptionReportFormat optionReportFormat, Double startNo, Double endNo) throws Exception {
             Do("ReadEJByZBlocks", "OptionReportFormat", optionReportFormat, "StartNo", startNo, "EndNo", endNo);
     }

    /**
     *Read the amounts returned as change by different payment types for the specified operator. Command works for KL version 2 devices.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's number
     * @return DailyReturnedChangeAmountsByOperator_OldRes
     * @throws java.lang.Exception
     */
     public DailyReturnedChangeAmountsByOperator_OldRes ReadDailyReturnedChangeAmountsByOperator_Old(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyReturnedChangeAmountsByOperator_Old", "OperNum", operNum), DailyReturnedChangeAmountsByOperator_OldRes.class);
     }

    /**
     *Provides information about the payments in current receipt. This command is valid after receipt closing also.
     * @return CurrentOrLastReceiptPaymentAmountsRes
     * @throws java.lang.Exception
     */
     public CurrentOrLastReceiptPaymentAmountsRes ReadCurrentOrLastReceiptPaymentAmounts() throws Exception {
             return CreateRes(Do("ReadCurrentOrLastReceiptPaymentAmounts"), CurrentOrLastReceiptPaymentAmountsRes.class);
     }

    /**
     *Provides information about the amounts returned as change by type of payment.
     * @return DailyReturnedChangeAmountsRes
     * @throws java.lang.Exception
     */
     public DailyReturnedChangeAmountsRes ReadDailyReturnedChangeAmounts() throws Exception {
             return CreateRes(Do("ReadDailyReturnedChangeAmounts"), DailyReturnedChangeAmountsRes.class);
     }

    /**
     *Read the amounts received from sales by type of payment and specified operator. Command works for KL version 2 devices.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @return DailyReceivedSalesAmountsByOperator_OldRes
     * @throws java.lang.Exception
     */
     public DailyReceivedSalesAmountsByOperator_OldRes ReadDailyReceivedSalesAmountsByOperator_Old(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyReceivedSalesAmountsByOperator_Old", "OperNum", operNum), DailyReceivedSalesAmountsByOperator_OldRes.class);
     }

    /**
     *Stores in the memory the graphic file under stated number. Prints information about loaded in the printer graphic files.
     * @param  logoNumber
     *         1 character value from '0' to '9' setting the number where the logo will be saved.
     * @throws java.lang.Exception
     */
     public void ProgLogoNum(String logoNumber) throws Exception {
             Do("ProgLogoNum", "LogoNumber", logoNumber);
     }

    /**
     *Provides information for the programmed data, the turnovers from the stated department number
     * @param  depNum
     *         2 symbols for department number in format: ##
     * @return DepartmentAllRes
     * @throws java.lang.Exception
     */
     public DepartmentAllRes ReadDepartmentAll(Double depNum) throws Exception {
             return CreateRes(Do("ReadDepartmentAll", "DepNum", depNum), DepartmentAllRes.class);
     }

    /**
     *Print a brief FM payments report by initial and end FM report number.
     * @param  startZNum
     *         4 symbols for the initial FM report number included in report, format ####
     * @param  endZNum
     *         4 symbols for the final FM report number included in report, format ####
     * @throws java.lang.Exception
     */
     public void PrintBriefFMPaymentsReportByZBlocks(Double startZNum, Double endZNum) throws Exception {
             Do("PrintBriefFMPaymentsReportByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
     }

    /**
     *Print a brief FM payments report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws java.lang.Exception
     */
     public void PrintBriefFMPaymentsReportByDate(Date startDate, Date endDate) throws Exception {
             Do("PrintBriefFMPaymentsReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Program customer in FD data base.
     * @param  customerNum
     *         4 symbols for customer number in format ####
     * @param  customerCompanyName
     *         26 symbols for customer name
     * @param  customerFullName
     *         16 symbols for Buyer name
     * @param  vATNumber
     *         13 symbols for VAT number on customer
     * @param  uIC
     *         13 symbols for customer Unique Identification Code
     * @param  address
     *         30 symbols for address on customer
     * @param  optionUICType
     *         1 symbol for type of Unique Identification Code:  
     *  - '0' - Bulstat 
     *  - '1' - EGN 
     *  - '2' - Foreigner Number 
     *  - '3' - NRA Official Number
     * @throws java.lang.Exception
     */
     public void ProgCustomerData(Double customerNum, String customerCompanyName, String customerFullName, String vATNumber, String uIC, String address, OptionUICType optionUICType) throws Exception {
             Do("ProgCustomerData", "CustomerNum", customerNum, "CustomerCompanyName", customerCompanyName, "CustomerFullName", customerFullName, "VATNumber", vATNumber, "UIC", uIC, "Address", address, "OptionUICType", optionUICType);
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.
     * @param  namePLU
     *         36 symbols for article's name. 34 symbols are printed on paper. 
     * Symbol 0x7C '|' is new line separator.
     * @param  optionVATClass
     *         1 character for VAT class: 
     *  - 'А' - VAT Class 0 
     *  - 'Б' - VAT Class 1 
     *  - 'В' - VAT Class 2 
     *  - 'Г' - VAT Class 3 
     *  - 'Д' - VAT Class 4 
     *  - 'Е' - VAT Class 5 
     *  - 'Ж' - VAT Class 6 
     *  - 'З' - VAT Class 7 
     *  - '*' - Forbidden
     * @param  price
     *         Up to 10 symbols for article's price. Use minus sign '-' for correction
     * @param  quantity
     *         Up to 10 symbols for quantity
     * @param  discAddP
     *         Up to 7 symbols for percentage of discount/addition. 
     * Use minus sign '-' for discount
     * @param  discAddV
     *         Up to 8 symbols for value of discount/addition. 
     * Use minus sign '-' for discount
     * @throws java.lang.Exception
     */
     public void SellPLUwithSpecifiedVAT(String namePLU, OptionVATClass optionVATClass, Double price, Double quantity, Double discAddP, Double discAddV) throws Exception {
             Do("SellPLUwithSpecifiedVAT", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
     }

    /**
     *Print a brief FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws java.lang.Exception
     */
     public void PrintBriefFMReportByDate(Date startDate, Date endDate) throws Exception {
             Do("PrintBriefFMReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Shows a 20-symbols text in the upper external display line.
     * @param  text
     *         20 symbols text
     * @throws java.lang.Exception
     */
     public void DisplayTextLine1(String text) throws Exception {
             Do("DisplayTextLine1", "Text", text);
     }

    /**
     *Provides information about the current VAT rates which are the last values stored into the FM.
     * @return VATratesRes
     * @throws java.lang.Exception
     */
     public VATratesRes ReadVATrates() throws Exception {
             return CreateRes(Do("ReadVATrates"), VATratesRes.class);
     }

    /**
     *Provides information about the amounts received from sales by type of payment.
     * @return DailyReceivedSalesAmountsRes
     * @throws java.lang.Exception
     */
     public DailyReceivedSalesAmountsRes ReadDailyReceivedSalesAmounts() throws Exception {
             return CreateRes(Do("ReadDailyReceivedSalesAmounts"), DailyReceivedSalesAmountsRes.class);
     }

    /**
     *Programs available quantity and Quantiy type for a certain article in the internal database.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  availableQuantity
     *         Up to 11 symbols for available quantity in stock
     * @param  optionQuantityType
     *         1 symbol for Quantity flag with next value:  
     *  - '0'- Availability of PLU stock is not monitored  
     *  - '1'- Disable negative quantity  
     *  - '2'- Enable negative quantity
     * @throws java.lang.Exception
     */
     public void ProgPLUqty(Double pLUNum, Double availableQuantity, OptionQuantityType optionQuantityType) throws Exception {
             Do("ProgPLUqty", "PLUNum", pLUNum, "AvailableQuantity", availableQuantity, "OptionQuantityType", optionQuantityType);
     }

    /**
     *Provides information about the programmed VAT number, type of VAT number, register number in NRA and Date of registration in NRA.
     * @return RegistrationInfoRes
     * @throws java.lang.Exception
     */
     public RegistrationInfoRes ReadRegistrationInfo() throws Exception {
             return CreateRes(Do("ReadRegistrationInfo"), RegistrationInfoRes.class);
     }

    /**
     *Clears the external display.
     * @throws java.lang.Exception
     */
     public void ClearDisplay() throws Exception {
             Do("ClearDisplay");
     }

    /**
     *Programs the data for a certain article (item) in the internal database. The price may have variable length, while the name field is fixed.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  name
     *         20 symbols for article name
     * @param  price
     *         Up to 10 symbols for article price
     * @param  optionVATClass
     *         1 character for VAT class: 
     *  - 'А' - VAT Class 0 
     *  - 'Б' - VAT Class 1 
     *  - 'В' - VAT Class 2 
     *  - 'Г' - VAT Class 3 
     *  - 'Д' - VAT Class 4 
     *  - 'Е' - VAT Class 5 
     *  - 'Ж' - VAT Class 6 
     *  - 'З' - VAT Class 7 
     *  - '*' - Forbidden
     * @param  belongToDepNum
     *         BelongToDepNum + 80h, 1 symbol for article 
     * department attachment, formed in the following manner:
     * @throws java.lang.Exception
     */
     public void ProgPLU_Old(Double pLUNum, String name, Double price, OptionVATClass optionVATClass, int belongToDepNum) throws Exception {
             Do("ProgPLU_Old", "PLUNum", pLUNum, "Name", name, "Price", price, "OptionVATClass", optionVATClass, "BelongToDepNum", belongToDepNum);
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article with specified name, price, fractional quantity, VAT class and/or discount/addition on the transaction.
     * @param  namePLU
     *         36 symbols for article's name. 34 symbols are printed on paper. 
     * Symbol 0x7C '|' is new line separator.
     * @param  optionVATClass
     *         1 character for VAT class: 
     *  - 'А' - VAT Class 0 
     *  - 'Б' - VAT Class 1 
     *  - 'В' - VAT Class 2 
     *  - 'Г' - VAT Class 3 
     *  - 'Д' - VAT Class 4 
     *  - 'Е' - VAT Class 5 
     *  - 'Ж' - VAT Class 6 
     *  - 'З' - VAT Class 7 
     *  - '*' - Forbidden
     * @param  price
     *         Up to 10 symbols for article's price. Use minus sign '-' for correction
     * @param  quantity
     *         From 3 to 10 symbols for quantity in format fractional format, e.g. 1/3
     * @param  discAddP
     *         1 to 7 symbols for percentage of discount/addition. Use 
     * minus sign '-' for discount
     * @param  discAddV
     *         1 to 8 symbols for value of discount/addition. Use 
     * minus sign '-' for discount
     * @throws java.lang.Exception
     */
     public void SellFractQtyPLUwithSpecifiedVAT(String namePLU, OptionVATClass optionVATClass, Double price, String quantity, Double discAddP, Double discAddV) throws Exception {
             Do("SellFractQtyPLUwithSpecifiedVAT", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
     }

    /**
     *Read the PO by type of payment and the total number of operations by specified operator
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @return DailyPObyOperatorRes
     * @throws java.lang.Exception
     */
     public DailyPObyOperatorRes ReadDailyPObyOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyPObyOperator", "OperNum", operNum), DailyPObyOperatorRes.class);
     }

    /**
     *Opens an postponed electronic fiscal receipt with 1 minute timeout assigned to the specified operator number and operator password, parameters for receipt format, print VAT, printing type and unique receipt number.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionReceiptFormat
     *         1 symbol with value: 
     *  - '1' - Detailed 
     *  - '0' - Brief
     * @param  optionPrintVAT
     *         1 symbol with value:  
     *  - '1' - Yes 
     *  - '0' - No
     * @param  uniqueReceiptNumber
     *         Up to 24 symbols for unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenElectronicReceipt(Double operNum, String operPass, OptionReceiptFormat optionReceiptFormat, OptionPrintVAT optionPrintVAT, String uniqueReceiptNumber) throws Exception {
             Do("OpenElectronicReceipt", "OperNum", operNum, "OperPass", operPass, "OptionReceiptFormat", optionReceiptFormat, "OptionPrintVAT", optionPrintVAT, "UniqueReceiptNumber", uniqueReceiptNumber);
     }

    /**
     *Program the content of the header UIC prefix.
     * @param  headerUICprefix
     *         12 symbols for header UIC prefix
     * @throws java.lang.Exception
     */
     public void ProgHeaderUICprefix(String headerUICprefix) throws Exception {
             Do("ProgHeaderUICprefix", "HeaderUICprefix", headerUICprefix);
     }

    /**
     *Programs price and price type for a certain article in the internal database.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  price
     *         Up to 10 symbols for article price
     * @param  optionPrice
     *         1 symbol for price flag with next value: 
     *  - '0'- Free price is disable valid only programmed price 
     *  - '1'- Free price is enable 
     *  - '2'- Limited price
     * @throws java.lang.Exception
     */
     public void ProgPLUprice(Double pLUNum, Double price, OptionPrice optionPrice) throws Exception {
             Do("ProgPLUprice", "PLUNum", pLUNum, "Price", price, "OptionPrice", optionPrice);
     }

    /**
     *Provides information about the QR code data in specified number issued receipt.
     * @param  rcpNum
     *         6 symbols with format ######
     * @return String
     * @throws java.lang.Exception
     */
     public String ReadReceiptNumQRcodeData(Double rcpNum) throws Exception {
             return CreateRes(Do("ReadReceiptNumQRcodeData", "RcpNum", rcpNum), String.class);
     }

    /**
     *Provides information about the amounts received from sales by type of payment. Command works for KL version 2 devices.
     * @return DailyReceivedSalesAmounts_OldRes
     * @throws java.lang.Exception
     */
     public DailyReceivedSalesAmounts_OldRes ReadDailyReceivedSalesAmounts_Old() throws Exception {
             return CreateRes(Do("ReadDailyReceivedSalesAmounts_Old"), DailyReceivedSalesAmounts_OldRes.class);
     }

    /**
     * Reads raw bytes from FP.
     * @param  count
     *         How many bytes to read if EndChar is not specified
     * @param  endChar
     *         The character marking the end of the data. If present Count parameter is ignored.
     * @return byte[]
     * @throws java.lang.Exception
     */
     public byte[] RawRead(Double count, String endChar) throws Exception {
             return CreateRes(Do("RawRead", "Count", count, "EndChar", endChar), byte[].class);
     }

    /**
     *Provides information about the QR code data in last issued receipt.
     * @return String
     * @throws java.lang.Exception
     */
     public String ReadLastReceiptQRcodeData() throws Exception {
             return CreateRes(Do("ReadLastReceiptQRcodeData"), String.class);
     }

    /**
     *Program the contents of a header lines.
     * @param  optionHeaderLine
     *         1 symbol with value: 
     *  - '1' - Header 1 
     *  - '2' - Header 2 
     *  - '3' - Header 3 
     *  - '4' - Header 4 
     *  - '5' - Header 5 
     *  - '6' - Header 6 
     *  - '7' - Header 7
     * @param  headerText
     *         TextLength symbols for header lines
     * @throws java.lang.Exception
     */
     public void ProgHeader(OptionHeaderLine optionHeaderLine, String headerText) throws Exception {
             Do("ProgHeader", "OptionHeaderLine", optionHeaderLine, "HeaderText", headerText);
     }

    /**
     *Sets logo number, which is active and will be printed as logo in the receipt header. Print information about active number.
     * @param  logoNumber
     *         1 character value from '0' to '9' or '?'. The number sets the active file, and 
     * the '?' invokes only printing of information
     * @throws java.lang.Exception
     */
     public void SetActiveLogoNum(String logoNumber) throws Exception {
             Do("SetActiveLogoNum", "LogoNumber", logoNumber);
     }

    /**
     *Closes the non-fiscal receipt.
     * @throws java.lang.Exception
     */
     public void CloseNonFiscalReceipt() throws Exception {
             Do("CloseNonFiscalReceipt");
     }

    /**
     *Stores in the memory the graphic file under number 0. Prints information  about loaded in the printer graphic files.
     * @param  bMPfile
     *         *BMP file with fixed size 9022 bytes
     * @throws java.lang.Exception
     */
     public void ProgLogo(String bMPfile) throws Exception {
             Do("ProgLogo", "BMPfile", bMPfile);
     }

    /**
     *Shows the current date and time on the external display.
     * @throws java.lang.Exception
     */
     public void DisplayDateTime() throws Exception {
             Do("DisplayDateTime");
     }

    /**
     *Print or store Electronic Journal Report by initial and end date.
     * @param  optionReportStorage
     *         1 character with value: 
     *  - 'J1' - Printing 
     *  - 'J2' - USB storage 
     *  - 'J4' - SD card storage
     * @param  startRepFromDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endRepFromDate
     *         6 symbols for final date in the DDMMYY format
     * @throws java.lang.Exception
     */
     public void PrintOrStoreEJByDate(OptionReportStorage optionReportStorage, Date startRepFromDate, Date endRepFromDate) throws Exception {
             Do("PrintOrStoreEJByDate", "OptionReportStorage", optionReportStorage, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
     }

    /**
     *Provides information about the amounts returned as change by type of payment. Command works for KL version 2 devices.
     * @return DailyReturnedChangeAmounts_OldRes
     * @throws java.lang.Exception
     */
     public DailyReturnedChangeAmounts_OldRes ReadDailyReturnedChangeAmounts_Old() throws Exception {
             return CreateRes(Do("ReadDailyReturnedChangeAmounts_Old"), DailyReturnedChangeAmounts_OldRes.class);
     }

    /**
     *Print Electronic Journal Report by number of Z report blocks and selected documents content. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
     * @param  flagsReceipts
     *         1 symbol for Receipts included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=1 Yes, Flags.5=0 No (Include PO) 
     * Flags.4=1 Yes, Flags.4=0 No (Include RA) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)
     * @param  flagsReports
     *         1 symbol for Reports included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=0 
     * Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)
     * @param  startZNum
     *         4 symbols for initial number report in format ####
     * @param  endZNum
     *         4 symbols for final number report in format ####
     * @throws java.lang.Exception
     */
     public void PrintEJByZBlocksCustom(byte flagsReceipts, byte flagsReports, Double startZNum, Double endZNum) throws Exception {
             Do("PrintEJByZBlocksCustom", "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartZNum", startZNum, "EndZNum", endZNum);
     }

    /**
     *Feeds one line of paper.
     * @throws java.lang.Exception
     */
     public void PaperFeed() throws Exception {
             Do("PaperFeed");
     }

    /**
     *Close the fiscal receipt (Fiscal receipt, Invoice receipt, Storno receipt, Credit Note or Non-fical receipt). When the payment is finished.
     * @throws java.lang.Exception
     */
     public void CloseReceipt() throws Exception {
             Do("CloseReceipt");
     }

    /**
     *Registers the sell (for correction use minus sign in the price field)  of article with specified department, name, price, quantity and/or discount/addition on  the transaction.
     * @param  namePLU
     *         36 symbols for name of sale. 34 symbols are printed on 
     * paper. Symbol 0x7C '|' is new line separator.
     * @param  depNum
     *         1 symbol for article department 
     * attachment, formed in the following manner: DepNum[HEX] + 80h 
     * example: Dep01 = 81h, Dep02 = 82h … Dep19 = 93h
     * @param  price
     *         Up to 10 symbols for article's price. Use minus sign '-' for correction
     * @param  quantity
     *         Up to 10symbols for article's quantity sold
     * @param  discAddP
     *         Up to 7 for percentage of discount/addition. Use 
     * minus sign '-' for discount
     * @param  discAddV
     *         Up to 8 symbols for percentage of 
     * discount/addition. Use minus sign '-' for discount
     * @throws java.lang.Exception
     */
     public void SellPLUfromDep_(String namePLU, int depNum, Double price, Double quantity, Double discAddP, Double discAddV) throws Exception {
             Do("SellPLUfromDep_", "NamePLU", namePLU, "DepNum", depNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
     }

    /**
     *Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoiceCreditNotePrintType
     *         1 symbol with value: 
     * - 'A' - Step by step printing 
     * - 'C' - Postponed Printing 
     * - 'E' - Buffered Printing
     * @param  recipient
     *         26 symbols for Invoice recipient
     * @param  buyer
     *         16 symbols for Invoice buyer
     * @param  vATNumber
     *         13 symbols for customer Fiscal number
     * @param  uIC
     *         13 symbols for customer Unique Identification Code
     * @param  address
     *         30 symbols for Address
     * @param  optionUICType
     *         1 symbol for type of Unique Identification Code:  
     *  - '0' - Bulstat 
     *  - '1' - EGN 
     *  - '2' - Foreigner Number 
     *  - '3' - NRA Official Number
     * @param  optionStornoReason
     *         1 symbol for reason of storno operation with value:  
     * - '0' - Operator error  
     * - '1' - Goods Claim or Goods return  
     * - '2' - Tax relief
     * @param  relatedToInvoiceNum
     *         10 symbols for issued invoice number
     * @param  relatedToInvoiceDateTime
     *         17 symbols for issued invoice date and time in format
     * @param  relatedToRcpNum
     *         Up to 6 symbols for issued receipt number
     * @param  fMNum
     *         8 symbols for number of the Fiscal Memory
     * @param  relatedToURN
     *         Up to 24 symbols for the issed invoice receipt unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device 
     * number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenCreditNoteWithFreeCustomerData(Double operNum, String operPass, OptionInvoiceCreditNotePrintType optionInvoiceCreditNotePrintType, String recipient, String buyer, String vATNumber, String uIC, String address, OptionUICType optionUICType, OptionStornoReason optionStornoReason, String relatedToInvoiceNum, Date relatedToInvoiceDateTime, Double relatedToRcpNum, String fMNum, String relatedToURN) throws Exception {
             Do("OpenCreditNoteWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "OptionInvoiceCreditNotePrintType", optionInvoiceCreditNotePrintType, "Recipient", recipient, "Buyer", buyer, "VATNumber", vATNumber, "UIC", uIC, "Address", address, "OptionUICType", optionUICType, "OptionStornoReason", optionStornoReason, "RelatedToInvoiceNum", relatedToInvoiceNum, "RelatedToInvoiceDateTime", relatedToInvoiceDateTime, "RelatedToRcpNum", relatedToRcpNum, "FMNum", fMNum, "RelatedToURN", relatedToURN);
     }

    /**
     *Prints barcode from type stated by CodeType and CodeLen and with data stated in CodeData field.
     * @param  optionCodeType
     *         1 symbol with possible values: 
     *  - '0' - UPC A 
     *  - '1' - UPC E 
     *  - '2' - EAN 13 
     *  - '3' - EAN 8 
     *  - '4' - CODE 39 
     *  - '5' - ITF 
     *  - '6' - CODABAR 
     *  - 'H' - CODE 93 
     *  - 'I' - CODE 128
     * @param  codeLen
     *         Up to 2 bytes for number of bytes according to the table
     * @param  codeData
     *         Up to 100 bytes data in range according to the table
     * @throws java.lang.Exception
     */
     public void PrintBarcode(OptionCodeType optionCodeType, Double codeLen, String codeData) throws Exception {
             Do("PrintBarcode", "OptionCodeType", optionCodeType, "CodeLen", codeLen, "CodeData", codeData);
     }

    /**
     *Provides information about the accumulated sale and storno amounts by VAT group.
     * @return DailySaleAndStornoAmountsByVATRes
     * @throws java.lang.Exception
     */
     public DailySaleAndStornoAmountsByVATRes ReadDailySaleAndStornoAmountsByVAT() throws Exception {
             return CreateRes(Do("ReadDailySaleAndStornoAmountsByVAT"), DailySaleAndStornoAmountsByVATRes.class);
     }

    /**
     *Print a department report with or without zeroing ('Z' or 'X').
     * @param  optionZeroing
     *         1 symbol with value: 
     *  - 'Z' - Zeroing 
     *  - 'X' - Without zeroing
     * @throws java.lang.Exception
     */
     public void PrintDepartmentReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintDepartmentReport", "OptionZeroing", optionZeroing);
     }

    /**
     *Read or Store Electronic Journal report by CSV format option and document content selecting. If CSV format is set the content can includes only fiscal receipts. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
     * @param  optionStorageReport
     *         1 character with value 
     *  - 'j0' - To PC 
     *  - 'j2' - To USB Flash Drive 
     *  - 'j4' - To SD card
     * @param  optionCSVformat
     *         1 symbol with value: 
     *  - 'C' - Yes 
     *  - 'X' - No
     * @param  flagsReceipts
     *         1 symbol for Receipts included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=1 Yes, Flags.5=0 No (Include PO) 
     * Flags.4=1 Yes, Flags.4=0 No (Include RA) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)
     * @param  flagsReports
     *         1 symbol for Reports included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=0 
     * Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)
     * @throws java.lang.Exception
     */
     public void ReadEJCustom(OptionStorageReport optionStorageReport, OptionCSVformat optionCSVformat, byte flagsReceipts, byte flagsReports) throws Exception {
             Do("ReadEJCustom", "OptionStorageReport", optionStorageReport, "OptionCSVformat", optionCSVformat, "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports);
     }

    /**
     *Shows a 20-symbols text in the lower external display line.
     * @param  text
     *         20 symbols text
     * @throws java.lang.Exception
     */
     public void DisplayTextLine2(String text) throws Exception {
             Do("DisplayTextLine2", "Text", text);
     }

    /**
     *Provides information about the current reading of the daily-report- with-zeroing counter, the number of the last block stored in FM, the number of EJ and the date and time of the last block storage in the FM.
     * @return DailyCountersRes
     * @throws java.lang.Exception
     */
     public DailyCountersRes ReadDailyCounters() throws Exception {
             return CreateRes(Do("ReadDailyCounters"), DailyCountersRes.class);
     }

    /**
     *Print Electronic Journal report with selected documents content. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
     * @param  flagsReceipts
     *         1 symbol for Receipts included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=1 Yes, Flags.5=0 No (Include PO) 
     * Flags.4=1 Yes, Flags.4=0 No (Include RA) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)
     * @param  flagsReports
     *         1 symbol for Reports included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=0 
     * Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)
     * @throws java.lang.Exception
     */
     public void PrintEJCustom(byte flagsReceipts, byte flagsReports) throws Exception {
             Do("PrintEJCustom", "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports);
     }

    /**
     *Erase all articles in PLU database.
     * @param  password
     *         6 symbols for password
     * @throws java.lang.Exception
     */
     public void EraseAllPLUs(String password) throws Exception {
             Do("EraseAllPLUs", "Password", password);
     }

    /**
     *Confirm Unique Identification Code (UIC) and UIC type into the operative memory.
     * @param  password
     *         6-symbols string
     * @throws java.lang.Exception
     */
     public void ConfirmFiscalization(String password) throws Exception {
             Do("ConfirmFiscalization", "Password", password);
     }

    /**
     *Read the RA by type of payment and the total number of operations by specified operator.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @return DailyRAbyOperatorRes
     * @throws java.lang.Exception
     */
     public DailyRAbyOperatorRes ReadDailyRAbyOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyRAbyOperator", "OperNum", operNum), DailyRAbyOperatorRes.class);
     }

    /**
     *Provides information about daily turnover on the FD client display
     * @throws java.lang.Exception
     */
     public void DisplayDailyTurnover() throws Exception {
             Do("DisplayDailyTurnover");
     }

    /**
     *Provides the content of the header lines
     * @param  optionHeaderLine
     *         1 symbol with value: 
     *  - '1' - Header 1 
     *  - '2' - Header 2 
     *  - '3' - Header 3 
     *  - '4' - Header 4 
     *  - '5' - Header 5 
     *  - '6' - Header 6 
     *  - '7' - Header 7
     * @return HeaderRes
     * @throws java.lang.Exception
     */
     public HeaderRes ReadHeader(OptionHeaderLine optionHeaderLine) throws Exception {
             return CreateRes(Do("ReadHeader", "OptionHeaderLine", optionHeaderLine), HeaderRes.class);
     }

    /**
     *Start paper cutter. The command works only in fiscal printer devices.
     * @throws java.lang.Exception
     */
     public void CutPaper() throws Exception {
             Do("CutPaper");
     }

    /**
     *Set invoice start and end number range. To execute the command is necessary to grand following condition: the number range to be spent, not used, or not set after the last RAM reset.
     * @param  startNum
     *         10 characters for start number in format: ##########
     * @param  endNum
     *         10 characters for end number in format: ##########
     * @throws java.lang.Exception
     */
     public void SetInvoiceRange(Double startNum, Double endNum) throws Exception {
             Do("SetInvoiceRange", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Programs Barcode of article in the internal database.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  barcode
     *         13 symbols for barcode
     * @throws java.lang.Exception
     */
     public void ProgPLUbarcode(Double pLUNum, String barcode) throws Exception {
             Do("ProgPLUbarcode", "PLUNum", pLUNum, "Barcode", barcode);
     }

    /**
     *Prints a detailed FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws java.lang.Exception
     */
     public void PrintDetailedFMReportByDate(Date startDate, Date endDate) throws Exception {
             Do("PrintDetailedFMReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Print or store Electronic Journal Report from by number of Z report blocks.
     * @param  optionReportStorage
     *         1 character with value: 
     *  - 'J1' - Printing 
     *  - 'J2' - USB storage 
     *  - 'J4' - SD card storage
     * @param  startZNum
     *         4 symbols for initial number report in format ####
     * @param  endZNum
     *         4 symbols for final number report in format ####
     * @throws java.lang.Exception
     */
     public void PrintOrStoreEJByZBlocks(OptionReportStorage optionReportStorage, Double startZNum, Double endZNum) throws Exception {
             Do("PrintOrStoreEJByZBlocks", "OptionReportStorage", optionReportStorage, "StartZNum", startZNum, "EndZNum", endZNum);
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article with specified VAT. If department is present the relevant accumulations are perfomed in its registers.
     * @param  namePLU
     *         36 symbols for article's name. 34 symbols are printed on paper. 
     * Symbol 0x7C '|' is new line separator.
     * @param  optionVATClass
     *         1 character for VAT class: 
     *  - 'А' - VAT Class 0 
     *  - 'Б' - VAT Class 1 
     *  - 'В' - VAT Class 2 
     *  - 'Г' - VAT Class 3 
     *  - 'Д' - VAT Class 4 
     *  - 'Е' - VAT Class 5 
     *  - 'Ж' - VAT Class 6 
     *  - 'З' - VAT Class 7 
     *  - '*' - Forbidden
     * @param  price
     *         Up to 10 symbols for article's price. Use minus sign '-' for correction
     * @param  quantity
     *         From 3 to 10 symbols for quantity in format fractional format, e.g. 1/3
     * @param  discAddP
     *         Up to 7 symbols for percentage of discount/addition. 
     * Use minus sign '-' for discount
     * @param  discAddV
     *         Up to 8 symbols for value of discount/addition. 
     * Use minus sign '-' for discount
     * @param  depNum
     *         1 symbol for article department 
     * attachment, formed in the following manner; example: Dep01 = 81h, Dep02 
     * = 82h … Dep19 = 93h
     * @throws java.lang.Exception
     */
     public void SellFractQtyPLUwithSpecifiedVATfromDep(String namePLU, OptionVATClass optionVATClass, Double price, String quantity, Double discAddP, Double discAddV, int depNum) throws Exception {
             Do("SellFractQtyPLUwithSpecifiedVATfromDep", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
     }

    /**
     *Provides information about the general registers of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUgeneralRes
     * @throws java.lang.Exception
     */
     public PLUgeneralRes ReadPLUgeneral(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUgeneral", "PLUNum", pLUNum), PLUgeneralRes.class);
     }

    /**
     *Read the amounts received from sales by type of payment and specified operator.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @return DailyReceivedSalesAmountsByOperatorRes
     * @throws java.lang.Exception
     */
     public DailyReceivedSalesAmountsByOperatorRes ReadDailyReceivedSalesAmountsByOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyReceivedSalesAmountsByOperator", "OperNum", operNum), DailyReceivedSalesAmountsByOperatorRes.class);
     }

    /**
     *Provide information for specified customer from FD data base.
     * @param  customerNum
     *         4 symbols for customer number in format ####
     * @return CustomerDataRes
     * @throws java.lang.Exception
     */
     public CustomerDataRes ReadCustomerData(Double customerNum) throws Exception {
             return CreateRes(Do("ReadCustomerData", "CustomerNum", customerNum), CustomerDataRes.class);
     }

    /**
     *Read the current status of the receipt.
     * @return CurrentReceiptInfoRes
     * @throws java.lang.Exception
     */
     public CurrentReceiptInfoRes ReadCurrentReceiptInfo() throws Exception {
             return CreateRes(Do("ReadCurrentReceiptInfo"), CurrentReceiptInfoRes.class);
     }

    /**
     *Opens a fiscal invoice receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoicePrintType
     *         1 symbol with value: 
     * - '1' - Step by step printing 
     * - '3' - Postponed Printing 
     * - '5' - Buffered Printing
     * @param  customerNum
     *         Symbol '#' and following up to 4 symbols for related customer ID number 
     * corresponding to the FD database
     * @param  uniqueReceiptNumber
     *         Up to 24 symbols for unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenInvoiceWithFDCustomerDB(Double operNum, String operPass, OptionInvoicePrintType optionInvoicePrintType, String customerNum, String uniqueReceiptNumber) throws Exception {
             Do("OpenInvoiceWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "OptionInvoicePrintType", optionInvoicePrintType, "CustomerNum", customerNum, "UniqueReceiptNumber", uniqueReceiptNumber);
     }

    /**
     *Provides information about all the registers of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUallDataRes
     * @throws java.lang.Exception
     */
     public PLUallDataRes ReadPLUallData(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUallData", "PLUNum", pLUNum), PLUallDataRes.class);
     }

    /**
     *Read Electronic Journal report with all documents.
     * @param  optionReportFormat
     *         1 character with value 
     *  - 'J0' - Detailed EJ 
     *  - 'J8' - Brief EJ
     * @throws java.lang.Exception
     */
     public void ReadEJ(OptionReportFormat optionReportFormat) throws Exception {
             Do("ReadEJ", "OptionReportFormat", optionReportFormat);
     }

    /**
     *Register the payment in the receipt with specified type of payment with amount received.
     * @param  optionPaymentType
     *         1 symbol for payment type: 
     *  - '0' - Payment 0 
     *  - '1' - Payment 1 
     *  - '2' - Payment 2 
     *  - '3' - Payment 3 
     *  - '4' - Payment 4 
     *  - '5' - Payment 5 
     *  - '6' - Payment 6 
     *  - '7' - Payment 7 
     *  - '8' - Payment 8 
     *  - '9' - Payment 9 
     *  - '10' - Payment 10 
     *  - '11' - Payment 11
     * @param  optionChange
     *         Default value is 0, 1 symbol with value: 
     *  - '0 - With Change 
     *  - '1' - Without Change
     * @param  amount
     *         Up to 10 characters for received amount
     * @param  optionChangeType
     *         1 symbols with value: 
     *  - '0' - Change In Cash 
     *  - '1' - Same As The payment 
     *  - '2' - Change In Currency
     * @throws java.lang.Exception
     */
     public void Payment(OptionPaymentType optionPaymentType, OptionChange optionChange, Double amount, OptionChangeType optionChangeType) throws Exception {
             Do("Payment", "OptionPaymentType", optionPaymentType, "OptionChange", optionChange, "Amount", amount, "OptionChangeType", optionChangeType);
     }

    /**
     *Provides consequently information about every single block stored in the FM starting with Acknowledgements and ending with end message.
     * @throws java.lang.Exception
     */
     public void ReadFMcontent() throws Exception {
             Do("ReadFMcontent");
     }

    /**
     *Read date and number of last Z-report and last RAM reset event.
     * @return LastDailyReportInfoRes
     * @throws java.lang.Exception
     */
     public LastDailyReportInfoRes ReadLastDailyReportInfo() throws Exception {
             return CreateRes(Do("ReadLastDailyReportInfo"), LastDailyReportInfoRes.class);
     }

    /**
     *Print a free text. The command can be executed only if receipt is opened (Fiscal receipt, Invoice receipt, Storno receipt, Credit Note or Non-fical receipt). In the beginning and in the end of line symbol '#' is printed.
     * @param  text
     *         TextLength-2 symbols
     * @throws java.lang.Exception
     */
     public void PrintText(String text) throws Exception {
             Do("PrintText", "Text", text);
     }

    /**
     *Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoiceCreditNotePrintType
     *         1 symbol with value: 
     * - 'A' - Step by step printing 
     * - 'C' - Postponed Printing 
     * - 'E' - Buffered Printing
     * @param  customerNum
     *         Symbol '#' and following up to 4 symbols for related customer ID 
     * number corresponding to the FD database
     * @param  optionStornoReason
     *         1 symbol for reason of storno operation with value:  
     * - '0' - Operator error  
     * - '1' - Goods Claim or Goods return  
     * - '2' - Tax relief
     * @param  relatedToInvoiceNum
     *         10 symbols for issued invoice number
     * @param  relatedToInvoiceDateTime
     *         17 symbols for issued invoice date and time in format
     * @param  relatedToRcpNum
     *         Up to 6 symbols for issued receipt number
     * @param  fMNum
     *         8 symbols for number of the Fiscal Memory
     * @param  relatedToURN
     *         Up to 24 symbols for the issed invoice receipt unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenCreditNoteWithFDCustomerDB(Double operNum, String operPass, OptionInvoiceCreditNotePrintType optionInvoiceCreditNotePrintType, String customerNum, OptionStornoReason optionStornoReason, String relatedToInvoiceNum, Date relatedToInvoiceDateTime, Double relatedToRcpNum, String fMNum, String relatedToURN) throws Exception {
             Do("OpenCreditNoteWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "OptionInvoiceCreditNotePrintType", optionInvoiceCreditNotePrintType, "CustomerNum", customerNum, "OptionStornoReason", optionStornoReason, "RelatedToInvoiceNum", relatedToInvoiceNum, "RelatedToInvoiceDateTime", relatedToInvoiceDateTime, "RelatedToRcpNum", relatedToRcpNum, "FMNum", fMNum, "RelatedToURN", relatedToURN);
     }

    /**
     *Prints an operator's report for a specified operator (0 = all operators) with or without zeroing ('Z' or 'X'). When a 'Z' value is specified the report should include all operators.
     * @param  optionZeroing
     *         with following values: 
     *  - 'Z' - Zeroing 
     *  - 'X' - Without zeroing
     * @param  number
     *         Symbols from 0 to 20 corresponding to operator's number 
     * ,0 for all operators
     * @throws java.lang.Exception
     */
     public void PrintOperatorReport(OptionZeroing optionZeroing, Double number) throws Exception {
             Do("PrintOperatorReport", "OptionZeroing", optionZeroing, "Number", number);
     }

    /**
     *Provides detailed 7-byte information about the current status of the fiscal printer.
     * @return StatusRes
     * @throws java.lang.Exception
     */
     public StatusRes ReadStatus() throws Exception {
             return CreateRes(Do("ReadStatus"), StatusRes.class);
     }

    /**
     *Opens a fiscal receipt assigned to the specified operator number and operator password, parameters for receipt format, print VAT, printing type and unique receipt number.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionReceiptFormat
     *         1 symbol with value: 
     *  - '1' - Detailed 
     *  - '0' - Brief
     * @param  optionPrintVAT
     *         1 symbol with value:  
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionFiscalRcpPrintType
     *         1 symbol with value: 
     * - '0' - Step by step printing 
     * - '2' - Postponed printing 
     * - '4' - Buffered printing
     * @param  uniqueReceiptNumber
     *         Up to 24 symbols for unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenReceipt(Double operNum, String operPass, OptionReceiptFormat optionReceiptFormat, OptionPrintVAT optionPrintVAT, OptionFiscalRcpPrintType optionFiscalRcpPrintType, String uniqueReceiptNumber) throws Exception {
             Do("OpenReceipt", "OperNum", operNum, "OperPass", operPass, "OptionReceiptFormat", optionReceiptFormat, "OptionPrintVAT", optionPrintVAT, "OptionFiscalRcpPrintType", optionFiscalRcpPrintType, "UniqueReceiptNumber", uniqueReceiptNumber);
     }

    /**
     *Read or Store Electronic Journal Report by number of Z report blocks, CSV format option and document content. If CSV format is set the content can includes only fiscal receipts. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
     * @param  optionStorageReport
     *         1 character with value 
     *  - 'j0' - To PC  
     * 
     * 
     *  - 'j2' - To USB Flash Drive 
     *  - 'j4' - To SD card
     * @param  optionCSVformat
     *         1 symbol with value: 
     *  - 'C' - Yes 
     *  - 'X' - No
     * @param  flagsReceipts
     *         1 symbol for Receipts included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=1 Yes, Flags.5=0 No (Include PO) 
     * Flags.4=1 Yes, Flags.4=0 No (Include RA) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)
     * @param  flagsReports
     *         1 symbol for Reports included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=0 
     * Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)
     * @param  startZNum
     *         4 symbols for initial number report in format ####
     * @param  endZNum
     *         4 symbols for final number report in format ####
     * @throws java.lang.Exception
     */
     public void ReadEJByZBlocksCustom(OptionStorageReport optionStorageReport, OptionCSVformat optionCSVformat, byte flagsReceipts, byte flagsReports, Double startZNum, Double endZNum) throws Exception {
             Do("ReadEJByZBlocksCustom", "OptionStorageReport", optionStorageReport, "OptionCSVformat", optionCSVformat, "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartZNum", startZNum, "EndZNum", endZNum);
     }

    /**
     *Sets the date and time and prints out the current values.
     * @param  dateTime
     *         Date Time parameter in format: DD-MM-YY HH:MM:SS
     * @throws java.lang.Exception
     */
     public void SetDateTime(Date dateTime) throws Exception {
             Do("SetDateTime", "DateTime", dateTime);
     }

    /**
     *Stores a block containing the number format into the fiscal memory. Print the current status on the printer.
     * @param  password
     *         6-symbols string
     * @param  optionDecimalPointPosition
     *         1 symbol with values: 
     *  - '0'- Whole numbers 
     *  - '2' - Fractions
     * @throws java.lang.Exception
     */
     public void ProgDecimalPointPosition(String password, OptionDecimalPointPosition optionDecimalPointPosition) throws Exception {
             Do("ProgDecimalPointPosition", "Password", password, "OptionDecimalPointPosition", optionDecimalPointPosition);
     }

    /**
     *Opens an electronic fiscal invoice credit note receipt with 1 minute timeout assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  recipient
     *         26 symbols for Invoice recipient
     * @param  buyer
     *         16 symbols for Invoice buyer
     * @param  vATNumber
     *         13 symbols for customer Fiscal number
     * @param  uIC
     *         13 symbols for customer Unique Identification Code
     * @param  address
     *         30 symbols for Address
     * @param  optionUICType
     *         1 symbol for type of Unique Identification Code:  
     *  - '0' - Bulstat 
     *  - '1' - EGN 
     *  - '2' - Foreigner Number 
     *  - '3' - NRA Official Number
     * @param  optionStornoReason
     *         1 symbol for reason of storno operation with value:  
     * - '0' - Operator error  
     * - '1' - Goods Claim or Goods return  
     * - '2' - Tax relief
     * @param  relatedToInvoiceNum
     *         10 symbols for issued invoice number
     * @param  relatedToInvoiceDateTime
     *         17 symbols for issued invoice date and time in format
     * @param  relatedToRcpNum
     *         Up to 6 symbols for issued receipt number
     * @param  fMNum
     *         8 symbols for number of the Fiscal Memory
     * @param  relatedToURN
     *         Up to 24 symbols for the issed invoice receipt unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device 
     * number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenElectronicCreditNoteWithFreeCustomerData(Double operNum, String operPass, String recipient, String buyer, String vATNumber, String uIC, String address, OptionUICType optionUICType, OptionStornoReason optionStornoReason, String relatedToInvoiceNum, Date relatedToInvoiceDateTime, Double relatedToRcpNum, String fMNum, String relatedToURN) throws Exception {
             Do("OpenElectronicCreditNoteWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "Recipient", recipient, "Buyer", buyer, "VATNumber", vATNumber, "UIC", uIC, "Address", address, "OptionUICType", optionUICType, "OptionStornoReason", optionStornoReason, "RelatedToInvoiceNum", relatedToInvoiceNum, "RelatedToInvoiceDateTime", relatedToInvoiceDateTime, "RelatedToRcpNum", relatedToRcpNum, "FMNum", fMNum, "RelatedToURN", relatedToURN);
     }

    /**
     *Provides information about electronic signature of last daily report.
     * @return String
     * @throws java.lang.Exception
     */
     public String ReadLastDailySignature() throws Exception {
             return CreateRes(Do("ReadLastDailySignature"), String.class);
     }

    /**
     *Provides information about the RA amounts by type of payment and the total number of operations. Command works for KL version 2 devices.
     * @return DailyRA_OldRes
     * @throws java.lang.Exception
     */
     public DailyRA_OldRes ReadDailyRA_Old() throws Exception {
             return CreateRes(Do("ReadDailyRA_Old"), DailyRA_OldRes.class);
     }

    /**
     *Provides the content of the header UIC prefix.
     * @return String
     * @throws java.lang.Exception
     */
     public String ReadHeaderUICPrefix() throws Exception {
             return CreateRes(Do("ReadHeaderUICPrefix"), String.class);
     }

    /**
     *Provides information about the price and price type of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUpriceRes
     * @throws java.lang.Exception
     */
     public PLUpriceRes ReadPLUprice(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUprice", "PLUNum", pLUNum), PLUpriceRes.class);
     }

    /**
     *Provides information about operator's name and password.
     * @param  number
     *         Symbol from 1 to 20 corresponding to the number of 
     * operators.
     * @return OperatorNamePasswordRes
     * @throws java.lang.Exception
     */
     public OperatorNamePasswordRes ReadOperatorNamePassword(Double number) throws Exception {
             return CreateRes(Do("ReadOperatorNamePassword", "Number", number), OperatorNamePasswordRes.class);
     }

    /**
     *Read the last operator's report number and date and time.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @return DailyCountersByOperatorRes
     * @throws java.lang.Exception
     */
     public DailyCountersByOperatorRes ReadDailyCountersByOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyCountersByOperator", "OperNum", operNum), DailyCountersByOperatorRes.class);
     }

    /**
     *Provides information about all programmed types of payment, currency name and currency exchange rate.
     * @return PaymentsRes
     * @throws java.lang.Exception
     */
     public PaymentsRes ReadPayments() throws Exception {
             return CreateRes(Do("ReadPayments"), PaymentsRes.class);
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article with specified VAT. If department is present the relevant accumulations are perfomed in its registers.
     * @param  namePLU
     *         36 symbols for article's name. 34 symbols are printed on paper. 
     * Symbol 0x7C '|' is new line separator.
     * @param  optionVATClass
     *         1 character for VAT class: 
     *  - 'А' - VAT Class 0 
     *  - 'Б' - VAT Class 1 
     *  - 'В' - VAT Class 2 
     *  - 'Г' - VAT Class 3 
     *  - 'Д' - VAT Class 4 
     *  - 'Е' - VAT Class 5 
     *  - 'Ж' - VAT Class 6 
     *  - 'З' - VAT Class 7 
     *  - '*' - Forbidden
     * @param  price
     *         Up to 10 symbols for article's price. Use minus sign '-' for correction
     * @param  quantity
     *         Up to 10 symbols for quantity
     * @param  discAddP
     *         Up to 7 symbols for percentage of discount/addition. 
     * Use minus sign '-' for discount
     * @param  discAddV
     *         Up to 8 symbols for value of discount/addition. 
     * Use minus sign '-' for discount
     * @param  depNum
     *         1 symbol for article department 
     * attachment, formed in the following manner; example: Dep01 = 81h,  
     * Dep02 = 82h … Dep19 = 93h
     * @throws java.lang.Exception
     */
     public void SellPLUwithSpecifiedVATfromDep(String namePLU, OptionVATClass optionVATClass, Double price, Double quantity, Double discAddP, Double discAddV, int depNum) throws Exception {
             Do("SellPLUwithSpecifiedVATfromDep", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
     }

    /**
     *Preprogram the name of the payment type.
     * @param  optionPaymentNum
     *         1 symbol for payment type  
     *  - '9' - Payment 9 
     *  - '10' - Payment 10 
     *  - '11' - Payment 11
     * @param  name
     *         10 symbols for payment type name
     * @param  rate
     *         Up to 10 symbols for exchange rate in format: ####.#####  
     * of the 11th payment type, maximal value 0420.00000
     * @throws java.lang.Exception
     */
     public void ProgPayment(OptionPaymentNum optionPaymentNum, String name, Double rate) throws Exception {
             Do("ProgPayment", "OptionPaymentNum", optionPaymentNum, "Name", name, "Rate", rate);
     }

    /**
     *Prints out a diagnostic receipt.
     * @throws java.lang.Exception
     */
     public void PrintDiagnostics() throws Exception {
             Do("PrintDiagnostics");
     }

    /**
     *Provides additional status information
     * @return DetailedPrinterStatusRes
     * @throws java.lang.Exception
     */
     public DetailedPrinterStatusRes ReadDetailedPrinterStatus() throws Exception {
             return CreateRes(Do("ReadDetailedPrinterStatus"), DetailedPrinterStatusRes.class);
     }

    /**
     *Opens a fiscal invoice receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoicePrintType
     *         1 symbol with value: 
     * - '1' - Step by step printing 
     * - '3' - Postponed Printing 
     * - '5' - Buffered Printing
     * @param  recipient
     *         26 symbols for Invoice recipient
     * @param  buyer
     *         16 symbols for Invoice buyer
     * @param  vATNumber
     *         13 symbols for customer Fiscal number
     * @param  uIC
     *         13 symbols for customer Unique Identification Code
     * @param  address
     *         30 symbols for Address
     * @param  optionUICType
     *         1 symbol for type of Unique Identification Code:  
     *  - '0' - Bulstat 
     *  - '1' - EGN 
     *  - '2' - Foreigner Number 
     *  - '3' - NRA Official Number
     * @param  uniqueReceiptNumber
     *         Up to 24 symbols for unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenInvoiceWithFreeCustomerData(Double operNum, String operPass, OptionInvoicePrintType optionInvoicePrintType, String recipient, String buyer, String vATNumber, String uIC, String address, OptionUICType optionUICType, String uniqueReceiptNumber) throws Exception {
             Do("OpenInvoiceWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "OptionInvoicePrintType", optionInvoicePrintType, "Recipient", recipient, "Buyer", buyer, "VATNumber", vATNumber, "UIC", uIC, "Address", address, "OptionUICType", optionUICType, "UniqueReceiptNumber", uniqueReceiptNumber);
     }

    /**
     *Program the contents of a footer lines.
     * @param  footerText
     *         TextLength symbols for footer line
     * @throws java.lang.Exception
     */
     public void ProgFooter(String footerText) throws Exception {
             Do("ProgFooter", "FooterText", footerText);
     }

    /**
     *Print a copy of the last receipt issued. When FD parameter for duplicates is enabled.
     * @throws java.lang.Exception
     */
     public void PrintLastReceiptDuplicate() throws Exception {
             Do("PrintLastReceiptDuplicate");
     }

    /**
     *Stores a block containing the values of the VAT rates into the fiscal memory. Print the values on the printer.
     * @param  password
     *         6-symbols string
     * @param  vATrate0
     *         Value of VAT rate А from 6 symbols in format ##.##
     * @param  vATrate1
     *         Value of VAT rate Б from 6 symbols in format ##.##
     * @param  vATrate2
     *         Value of VAT rate В from 6 symbols in format ##.##
     * @param  vATrate3
     *         Value of VAT rate Г from 6 symbols in format ##.##
     * @param  vATrate4
     *         Value of VAT rate Д from 6 symbols in format ##.##
     * @param  vATrate5
     *         Value of VAT rate Е from 6 symbols in format ##.##
     * @param  vATrate6
     *         Value of VAT rate Ж from 6 symbols in format ##.##
     * @param  vATrate7
     *         Value of VAT rate З from 6 symbols in format ##.##
     * @throws java.lang.Exception
     */
     public void ProgVATrates(String password, Double vATrate0, Double vATrate1, Double vATrate2, Double vATrate3, Double vATrate4, Double vATrate5, Double vATrate6, Double vATrate7) throws Exception {
             Do("ProgVATrates", "Password", password, "VATrate0", vATrate0, "VATrate1", vATrate1, "VATrate2", vATrate2, "VATrate3", vATrate3, "VATrate4", vATrate4, "VATrate5", vATrate5, "VATrate6", vATrate6, "VATrate7", vATrate7);
     }

    /**
     *Read or Store Electronic Journal Report by initial to end date, CSV format option and document content. If CSV format is set the content can includes only fiscal receipts. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
     * @param  optionStorageReport
     *         1 character with value 
     *  - 'j0' - To PC 
     *  - 'j2' - To USB Flash Drive 
     *  - 'j4' - To SD card
     * @param  optionCSVformat
     *         1 symbol with value: 
     *  - 'C' - Yes 
     *  - 'X' - No
     * @param  flagsReceipts
     *         1 symbol for Receipts included in EJ: 
     * Flags.7=0 
     * Flags.6=1, 0=w 
     * Flags.5=1 Yes, Flags.5=0 No (Include PO) 
     * Flags.4=1 Yes, Flags.4=0 No (Include RA) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)
     * @param  flagsReports
     *         1 symbol for Reports included in EJ: 
     * Flags.7=0 
     * Flags.6=1, 0=w 
     * Flags.5=1, 0=w 
     * Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)
     * @param  startRepFromDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endRepFromDate
     *         6 symbols for final date in the DDMMYY format
     * @throws java.lang.Exception
     */
     public void ReadEJByDateCustom(OptionStorageReport optionStorageReport, OptionCSVformat optionCSVformat, byte flagsReceipts, byte flagsReports, Date startRepFromDate, Date endRepFromDate) throws Exception {
             Do("ReadEJByDateCustom", "OptionStorageReport", optionStorageReport, "OptionCSVformat", optionCSVformat, "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
     }

    /**
     *Print a brief FM report by initial and end FM report number.
     * @param  startZNum
     *         4 symbols for the initial FM report number included in report, format ####
     * @param  endZNum
     *         4 symbols for the final FM report number included in report, format ####
     * @throws java.lang.Exception
     */
     public void PrintBriefFMReportByZBlocks(Double startZNum, Double endZNum) throws Exception {
             Do("PrintBriefFMReportByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
     }

    /**
     *Define Fiscal device type. The command is allowed only in non- fiscal mode, before fiscalization and after deregistration before the next fiscalization. The type of device can be read by Version command 0x21.
     * @param  optionFDType
     *         1 symbol for fiscal device type with value: 
     *  - '0' - FPr for Fuel type 3 
     *  - '1' - Main FPr for Fuel system type 31 
     *  - '2' - ECR for online store type 11 
     *  - '3' - FPr for online store type 21  
     *  - '*' - reset default type
     * @param  password
     *         3-symbols string
     * @throws java.lang.Exception
     */
     public void SetFiscalDeviceType(OptionFDType optionFDType, String password) throws Exception {
             Do("SetFiscalDeviceType", "OptionFDType", optionFDType, "Password", password);
     }

    /**
     *Read Electronic Journal Report by initial to end date.
     * @param  optionReportFormat
     *         1 character with value 
     *  - 'J0' - Detailed EJ 
     *  - 'J8' - Brief EJ
     * @param  startRepFromDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endRepFromDate
     *         6 symbols for final date in the DDMMYY format
     * @throws java.lang.Exception
     */
     public void ReadEJByDate(OptionReportFormat optionReportFormat, Date startRepFromDate, Date endRepFromDate) throws Exception {
             Do("ReadEJByDate", "OptionReportFormat", optionReportFormat, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
     }

    /**
     *Provides information about the barcode of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUbarcodeRes
     * @throws java.lang.Exception
     */
     public PLUbarcodeRes ReadPLUbarcode(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUbarcode", "PLUNum", pLUNum), PLUbarcodeRes.class);
     }

    /**
     *Read the PO by type of payment and the total number of operations by specified operator. Command works for KL version 2 devices.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @return DailyPObyOperator_OldRes
     * @throws java.lang.Exception
     */
     public DailyPObyOperator_OldRes ReadDailyPObyOperator_Old(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyPObyOperator_Old", "OperNum", operNum), DailyPObyOperator_OldRes.class);
     }

    /**
     *Set data for the state department number from the internal FD database. Parameters Price, OptionDepPrice and AdditionalName are not obligatory and require the previous not obligatory parameter.
     * @param  number
     *         2 symbols department number in format ##
     * @param  name
     *         20 characters department name
     * @param  optionVATClass
     *         1 character for VAT class: 
     *  - 'А' - VAT Class 0 
     *  - 'Б' - VAT Class 1 
     *  - 'В' - VAT Class 2 
     *  - 'Г' - VAT Class 3 
     *  - 'Д' - VAT Class 4 
     *  - 'Е' - VAT Class 5 
     *  - 'Ж' - VAT Class 6 
     *  - 'З' - VAT Class 7 
     *  - '*' - Forbidden
     * @param  price
     *         Up to 10 symbols for department price
     * @param  optionDepPrice
     *         1 symbol for Department price flags with next value:  
     * - '0' - Free price disabled  
     * - '1' - Free price enabled  
     * - '2' - Limited price  
     * - '4' - Free price disabled for single transaction  
     * - '5' - Free price enabled for single transaction  
     * - '6' - Limited price for single transaction
     * @param  additionalName
     *         14 characters additional department name
     * @throws java.lang.Exception
     */
     public void ProgDepartment(Double number, String name, OptionVATClass optionVATClass, Double price, OptionDepPrice optionDepPrice, String additionalName) throws Exception {
             Do("ProgDepartment", "Number", number, "Name", name, "OptionVATClass", optionVATClass, "Price", price, "OptionDepPrice", optionDepPrice, "AdditionalName", additionalName);
     }

    /**
     *Prints the programmed graphical logo with the stated number.
     * @param  number
     *         Number of logo to be printed. If missing, prints logo with number 0
     * @throws java.lang.Exception
     */
     public void PrintLogo(Double number) throws Exception {
             Do("PrintLogo", "Number", number);
     }

    /**
     *Read the total number of customers, discounts, additions, corrections and accumulated amounts by specified operator.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @return DailyGeneralRegistersByOperatorRes
     * @throws java.lang.Exception
     */
     public DailyGeneralRegistersByOperatorRes ReadDailyGeneralRegistersByOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyGeneralRegistersByOperator", "OperNum", operNum), DailyGeneralRegistersByOperatorRes.class);
     }

    /**
     *Read the RA by type of payment and the total number of operations by specified operator. Command works for KL version 2 devices.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @return DailyRAbyOperator_OldRes
     * @throws java.lang.Exception
     */
     public DailyRAbyOperator_OldRes ReadDailyRAbyOperator_Old(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyRAbyOperator_Old", "OperNum", operNum), DailyRAbyOperator_OldRes.class);
     }

    /**
     *Print a detailed FM report by initial and end FM report number.
     * @param  startZNum
     *         4 symbols for the initial report number included in report, format ####
     * @param  endZNum
     *         4 symbols for the final report number included in report, format ####
     * @throws java.lang.Exception
     */
     public void PrintDetailedFMReportByZBlocks(Double startZNum, Double endZNum) throws Exception {
             Do("PrintDetailedFMReportByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
     }

    /**
     *Print Customer X or Z report
     * @param  optionZeroing
     *         with following values: 
     *  - 'Z' -Zeroing 
     *  - 'X' - Without zeroing
     * @throws java.lang.Exception
     */
     public void PrintCustomerReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintCustomerReport", "OptionZeroing", optionZeroing);
     }

    /**
     *Depending on the parameter prints:  − daily fiscal report with zeroing and fiscal memory record, preceded by Electronic Journal report print ('Z'); − daily fiscal report without zeroing ('X');
     * @param  optionZeroing
     *         1 character with following values: 
     *  - 'Z' - Zeroing 
     *  - 'X' - Without zeroing
     * @throws java.lang.Exception
     */
     public void PrintDailyReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintDailyReport", "OptionZeroing", optionZeroing);
     }

    /**
     *Provides the content of the footer line.
     * @return String
     * @throws java.lang.Exception
     */
     public String ReadFooter() throws Exception {
             return CreateRes(Do("ReadFooter"), String.class);
     }

    /**
     *Opens a non-fiscal receipt assigned to the specified operator number, operator password and print type.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionNonFiscalPrintType
     *         1 symbol with value: 
     * - '0' - Step by step printing 
     * - '1' - Postponed Printing
     * @throws java.lang.Exception
     */
     public void OpenNonFiscalReceipt(Double operNum, String operPass, OptionNonFiscalPrintType optionNonFiscalPrintType) throws Exception {
             Do("OpenNonFiscalReceipt", "OperNum", operNum, "OperPass", operPass, "OptionNonFiscalPrintType", optionNonFiscalPrintType);
     }

    /**
     *Calculate the subtotal amount with printing and display visualization options. Provide information about values of the calculated amounts. If a percent or value discount/addition has been specified the subtotal and the discount/addition value will be printed regardless the parameter for printing.
     * @param  optionPrinting
     *         1 symbol with value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionDisplay
     *         1 symbol with value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  discAddV
     *         Up to 8 symbols for the value of the 
     * discount/addition. Use minus sign '-' for discount
     * @param  discAddP
     *         Up to 7 symbols for the percentage value of the 
     * discount/addition. Use minus sign '-' for discount
     * @return Double
     * @throws java.lang.Exception
     */
     public Double Subtotal(OptionPrinting optionPrinting, OptionDisplay optionDisplay, Double discAddV, Double discAddP) throws Exception {
             return CreateRes(Do("Subtotal", "OptionPrinting", optionPrinting, "OptionDisplay", optionDisplay, "DiscAddV", discAddV, "DiscAddP", discAddP), Double.class);
     }

    /**
     *Print a detailed FM payments report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws java.lang.Exception
     */
     public void PrintDetailedFMPaymentsReportByDate(Date startDate, Date endDate) throws Exception {
             Do("PrintDetailedFMPaymentsReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Starts session for read specified number electronic receipt data from EJ with its QR data.
     * @param  rcpNum
     *         6 symbols with format ######
     * @throws java.lang.Exception
     */
     public void ReadElectronicReceiptDataFromEJ(Double rcpNum) throws Exception {
             Do("ReadElectronicReceiptDataFromEJ", "RcpNum", rcpNum);
     }

    /**
     *Provides information about the RA amounts by type of payment and the total number of operations.
     * @return DailyRARes
     * @throws java.lang.Exception
     */
     public DailyRARes ReadDailyRA() throws Exception {
             return CreateRes(Do("ReadDailyRA"), DailyRARes.class);
     }

    /**
     *Provides information about the number of customers (number of fiscal receipt issued), number of discounts, additions and corrections made and the accumulated amounts.
     * @return GeneralDailyRegistersRes
     * @throws java.lang.Exception
     */
     public GeneralDailyRegistersRes ReadGeneralDailyRegisters() throws Exception {
             return CreateRes(Do("ReadGeneralDailyRegisters"), GeneralDailyRegistersRes.class);
     }

    /**
     *Provides the content of the Display Greeting message.
     * @return String
     * @throws java.lang.Exception
     */
     public String ReadDisplayGreetingMessage() throws Exception {
             return CreateRes(Do("ReadDisplayGreetingMessage"), String.class);
     }

    /**
     *Prints a brief payments from the FM.
     * @throws java.lang.Exception
     */
     public void PrintBriefFMPaymentsReport() throws Exception {
             Do("PrintBriefFMPaymentsReport");
     }

    /**
     *Provides information about the amounts on hand by type of payment. Command works for KL version 2 devices.
     * @return DailyAvailableAmounts_OldRes
     * @throws java.lang.Exception
     */
     public DailyAvailableAmounts_OldRes ReadDailyAvailableAmounts_Old() throws Exception {
             return CreateRes(Do("ReadDailyAvailableAmounts_Old"), DailyAvailableAmounts_OldRes.class);
     }

    /**
     *Read the Grand fiscal turnover sum and Grand fiscal VAT sum.
     * @return GrandFiscalSalesAndStornoAmountsRes
     * @throws java.lang.Exception
     */
     public GrandFiscalSalesAndStornoAmountsRes ReadGrandFiscalSalesAndStornoAmounts() throws Exception {
             return CreateRes(Do("ReadGrandFiscalSalesAndStornoAmounts"), GrandFiscalSalesAndStornoAmountsRes.class);
     }

    /**
     *Opens an electronic fiscal invoice receipt with 1 minute timeout assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  customerNum
     *         Symbol '#' and following up to 4 symbols for related customer ID number 
     * corresponding to the FD database
     * @param  uniqueReceiptNumber
     *         Up to 24 symbols for unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenElectronicInvoiceWithFDCustomerDB(Double operNum, String operPass, String customerNum, String uniqueReceiptNumber) throws Exception {
             Do("OpenElectronicInvoiceWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "CustomerNum", customerNum, "UniqueReceiptNumber", uniqueReceiptNumber);
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article belonging to department with specified name, price, fractional quantity and/or discount/addition on the transaction. The VAT of article got from department to which article belongs.
     * @param  namePLU
     *         36 symbols for article's name. 34 symbols are printed on paper. 
     * Symbol 0x7C '|' is new line separator.
     * @param  price
     *         Up to 10 symbols for article's price. Use minus sign '-' for correction
     * @param  quantity
     *         From 3 to 10 symbols for quantity in format fractional format, e.g. 1/3
     * @param  discAddP
     *         1 to 7 symbols for percentage of discount/addition. Use 
     * minus sign '-' for discount
     * @param  discAddV
     *         1 to 8 symbols for value of discount/addition. Use 
     * minus sign '-' for discount
     * @param  depNum
     *         1 symbol for article department 
     * attachment, formed in the following manner; example: Dep01 = 81h, Dep02 
     * = 82h … Dep19 = 93h
     * @throws java.lang.Exception
     */
     public void SellFractQtyPLUfromDep(String namePLU, Double price, String quantity, Double discAddP, Double discAddV, int depNum) throws Exception {
             Do("SellFractQtyPLUfromDep", "NamePLU", namePLU, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
     }

    /**
     *Provides information about the number of POS, printing of logo, cash drawer opening, cutting permission, display mode, article report type, Enable/Disable currency in receipt, EJ font type and working operators counter.
     * @return ParametersRes
     * @throws java.lang.Exception
     */
     public ParametersRes ReadParameters() throws Exception {
             return CreateRes(Do("ReadParameters"), ParametersRes.class);
     }

    /**
     *Provides information about the device type, Certificate number, Certificate date and time and Device model.
     * @return VersionRes
     * @throws java.lang.Exception
     */
     public VersionRes ReadVersion() throws Exception {
             return CreateRes(Do("ReadVersion"), VersionRes.class);
     }

    /**
     * Writes raw bytes to FP 
     * @param  bytes
     *         The bytes in BASE64 ecoded string to be written to FP
     * @throws java.lang.Exception
     */
     public void RawWrite(byte[] bytes) throws Exception {
             Do("RawWrite", "Bytes", bytes);
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article  with specified department. If VAT is present the relevant accumulations are perfomed in its  registers.
     * @param  namePLU
     *         36 symbols for name of sale. 34 symbols are printed on 
     * paper. Symbol 0x7C '|' is new line separator.
     * @param  depNum
     *         1 symbol for article department 
     * attachment, formed in the following manner: DepNum[HEX] + 80h 
     * example: Dep01 = 81h, Dep02 = 82h … Dep19 = 93h
     * @param  price
     *         Up to 10 symbols for article's price. Use minus sign '-' for correction
     * @param  quantity
     *         Up to 10 symbols for article's quantity sold
     * @param  discAddP
     *         Up to 7 for percentage of discount/addition. Use 
     * minus sign '-' for discount
     * @param  discAddV
     *         Up to 8 symbols for percentage of 
     * discount/addition. Use minus sign '-' for discount
     * @param  optionVATClass
     *         1 character for VAT class: 
     *  - 'А' - VAT Class 0 
     *  - 'Б' - VAT Class 1 
     *  - 'В' - VAT Class 2 
     *  - 'Г' - VAT Class 3 
     *  - 'Д' - VAT Class 4 
     *  - 'Е' - VAT Class 5 
     *  - 'Ж' - VAT Class 6 
     *  - 'З' - VAT Class 7 
     *  - '*' - Forbidden
     * @throws java.lang.Exception
     */
     public void SellPLUwithSpecifiedVATfromDep_(String namePLU, int depNum, Double price, Double quantity, Double discAddP, Double discAddV, OptionVATClass optionVATClass) throws Exception {
             Do("SellPLUwithSpecifiedVATfromDep_", "NamePLU", namePLU, "DepNum", depNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "OptionVATClass", optionVATClass);
     }

    /**
     *Print or store Electronic Journal Report from receipt number to receipt number.
     * @param  optionReportStorage
     *         1 character with value: 
     *  - 'J1' - Printing 
     *  - 'J2' - USB storage 
     *  - 'J4' - SD card storage
     * @param  startRcpNum
     *         6 symbols for initial receipt number included in report, in format ######.
     * @param  endRcpNum
     *         6 symbols for final receipt number included in report in format ######.
     * @throws java.lang.Exception
     */
     public void PrintOrStoreEJByRcpNum(OptionReportStorage optionReportStorage, Double startRcpNum, Double endRcpNum) throws Exception {
             Do("PrintOrStoreEJByRcpNum", "OptionReportStorage", optionReportStorage, "StartRcpNum", startRcpNum, "EndRcpNum", endRcpNum);
     }

    /**
     *Read the amounts returned as change by different payment types for the specified operator.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's number
     * @return DailyReturnedChangeAmountsByOperatorRes
     * @throws java.lang.Exception
     */
     public DailyReturnedChangeAmountsByOperatorRes ReadDailyReturnedChangeAmountsByOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyReturnedChangeAmountsByOperator", "OperNum", operNum), DailyReturnedChangeAmountsByOperatorRes.class);
     }

    /**
     *Opens an electronic fiscal invoice credit note receipt with 1 minute timeout assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  customerNum
     *         Symbol '#' and following up to 4 symbols for related customer ID 
     * number corresponding to the FD database
     * @param  optionStornoReason
     *         1 symbol for reason of storno operation with value:  
     * - '0' - Operator error  
     * - '1' - Goods Claim or Goods return  
     * - '2' - Tax relief
     * @param  relatedToInvoiceNum
     *         10 symbols for issued invoice number
     * @param  relatedToInvoiceDateTime
     *         17 symbols for issued invoice date and time in format
     * @param  relatedToRcpNum
     *         Up to 6 symbols for issued receipt number
     * @param  fMNum
     *         8 symbols for number of the Fiscal Memory
     * @param  relatedToURN
     *         Up to 24 symbols for the issed invoice receipt unique receipt number. 
     * NRA format: XXXХХХХХ-ZZZZ-YYYYYYY where: 
     * * ХХХХХХXX - 8 symbols [A-Z, a-z, 0-9] for individual device number, 
     * * ZZZZ - 4 symbols [A-Z, a-z, 0-9] for code of the operator, 
     * * YYYYYYY - 7 symbols [0-9] for next number of the receipt
     * @throws java.lang.Exception
     */
     public void OpenElectronicCreditNoteWithFDCustomerDB(Double operNum, String operPass, String customerNum, OptionStornoReason optionStornoReason, String relatedToInvoiceNum, Date relatedToInvoiceDateTime, Double relatedToRcpNum, String fMNum, String relatedToURN) throws Exception {
             Do("OpenElectronicCreditNoteWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "CustomerNum", customerNum, "OptionStornoReason", optionStornoReason, "RelatedToInvoiceNum", relatedToInvoiceNum, "RelatedToInvoiceDateTime", relatedToInvoiceDateTime, "RelatedToRcpNum", relatedToRcpNum, "FMNum", fMNum, "RelatedToURN", relatedToURN);
     }

    /**
     *Read or Store Electronic Journal Report from receipt number to receipt number, CSV format option and document content. If CSV format is set the content can includes only fiscal receipts. FlagsReceipts is a char with bits representing the receipt types. FlagsReports is a char with bits representing the report type.
     * @param  optionStorageReport
     *         1 character with value 
     *  - 'j0' - To PC 
     *  - 'j2' - To USB Flash Drive 
     *  - 'j4' - To SD card
     * @param  optionCSVformat
     *         1 symbol with value: 
     *  - 'C' - Yes  
     * 
     * 
     *  - 'X' - No
     * @param  flagsReceipts
     *         1 symbol for Receipts included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=1 Yes, Flags.5=0 No (Include PO) 
     * Flags.4=1 Yes, Flags.4=0 No (Include RA) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Credit Note) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Storno Rcp) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Invoice) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Fiscal Rcp)
     * @param  flagsReports
     *         1 symbol for Reports included in EJ: 
     * Flags.7=0 
     * Flags.6=1 
     * Flags.5=0 
     * Flags.4=1 Yes, Flags.4=0 No (Include FM reports) 
     * Flags.3=1 Yes, Flags.3=0 No (Include Other reports) 
     * Flags.2=1 Yes, Flags.2=0 No (Include Daily X) 
     * Flags.1=1 Yes, Flags.1=0 No (Include Daily Z) 
     * Flags.0=1 Yes, Flags.0=0 No (Include Duplicates)
     * @param  startRcpNum
     *         6 symbols for initial receipt number included in report in format ######.
     * @param  endRcpNum
     *         6 symbols for final receipt number included in report in format ######.
     * @throws java.lang.Exception
     */
     public void ReadEJByReceiptNumCustom(OptionStorageReport optionStorageReport, OptionCSVformat optionCSVformat, byte flagsReceipts, byte flagsReports, Double startRcpNum, Double endRcpNum) throws Exception {
             Do("ReadEJByReceiptNumCustom", "OptionStorageReport", optionStorageReport, "OptionCSVformat", optionCSVformat, "FlagsReceipts", flagsReceipts, "FlagsReports", flagsReports, "StartRcpNum", startRcpNum, "EndRcpNum", endRcpNum);
     }

    /**
     *Paying the exact amount in cash and close the fiscal receipt.
     * @throws java.lang.Exception
     */
     public void CashPayCloseReceipt() throws Exception {
             Do("CashPayCloseReceipt");
     }

    /**
     *Program the contents of a Display Greeting message.
     * @param  displayGreetingText
     *         20 symbols for Display greeting message
     * @throws java.lang.Exception
     */
     public void ProgDisplayGreetingMessage(String displayGreetingText) throws Exception {
             Do("ProgDisplayGreetingMessage", "DisplayGreetingText", displayGreetingText);
     }

    /**
     *Provides information about the PO amounts by type of payment and the total number of operations.
     * @return DailyPORes
     * @throws java.lang.Exception
     */
     public DailyPORes ReadDailyPO() throws Exception {
             return CreateRes(Do("ReadDailyPO"), DailyPORes.class);
     }

    /**
     *Prints an extended daily financial report (an article report followed by a daily financial report) with or without zeroing ('Z' or 'X').
     * @param  optionZeroing
     *         with following values: 
     *  - 'Z' -Zeroing 
     *  - 'X' - Without zeroing
     * @throws java.lang.Exception
     */
     public void PrintDetailedDailyReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintDetailedDailyReport", "OptionZeroing", optionZeroing);
     }

     }

