{"name":"Edafpgate","tagline":"EDA Fiscal Printer Gateway","body":"EDA FPGate Server\r\n=================\r\nEDA FPGate Server is application service which provide unified access to fiscal printers.\r\nIt is restful web service application which provide unified protocol for access to various fiscal devices (fiscal printers and cash registers).\r\nThe main goal of FPGate is to separate common programming logic for work with fiscal devices from complexity to manage variety of fiscal devices.  \r\n\r\nFPGate server is application which provide web API for access to unlimited number of predefined set of fiscal printers.\r\nThe server contains two main components:\r\n\r\n1.Administration (HTML) interface for defining printers and users http://localhost:8182/admin/\r\n2.Application JSON protocol API interface for using printers http://localhost:8182/print/\r\n\r\nCurrent version of FPGate supports following fiscal printers:\r\n\r\nDATECS FP3530,FP550,FP55,FP1000,FP300,FP60KL,FP2000KL, FP1000KL,FP700KL\r\n\r\nCurrent version of FPGate supports following cash registers:\r\n\r\nDATECS DP-05KL, DP-15KL,DP-25KL,DP-35KL,DP-45KL,DP-50KL,DP-50CKL,DP-55KL,MP-55 KL,DP-500PLUS KL\r\n\r\n\r\nWeb API\r\n=======\r\nAPI for access to printers is based on simple JSON application protocol over HTTP/HTTPS.\r\nAll API calls to services are in form of posting JSON Request object and receiving Response object as result of execution of request.\r\n\r\nRequest Object\r\n---------------------------\r\nRequest Object contains following attributes:\r\n\r\nAttribute  |Type   |Description\r\n-----------|-------|-------------------------\r\nPrinter    |Object |with following attributes\r\n.ID        |String |Unique ID of printer\r\n.Model     |String |Optional name of Printer Model Class (in case of using printer not defined on server)\r\n.Params    |Object |Optional Hash map with printer parameters in form of pairs parameter_name = value \r\nCommand    |String |Name of Printer Command\r\nArguments  |Array  |Array of strings with arguments of command\r\n\r\n\r\nResponse Object\r\n---------------\r\nResponse Object contains following attributes:\r\n\r\n Attribute  |Type       |Description\r\n------------|-----------|------------------------------------\r\nResultTable |Object     |Hash map result in form Key = Value\r\nErrorCode   |Integer    |Error code of last executed command (Depend of Command and specific printer implementation)\r\nMessages    |Array      |List of messages in process of executing command\r\nErrors      |Array      |List of errors and waring during execution of command\r\nLog         |Array      |Detailed log of execution of command\r\n\r\nThe main considerations about successful execution of particular command will be places as result in ResultTable and depends of commend implementation.\r\nFor example if you request PrintFiscalCheck command (which contains subcommands), some of subcommand can return error. \r\nPrinting fiscal check is atom command and always on success must complete with successful closing of fiscal check.\r\nIn that case you can check 'CloseStatus' field.\r\n\r\nWeb Appication Javascript Library\r\n=================================\r\nFor simplifying implementation in web applications there is Javascript Library *fpg-client.js* which encapsulate protocol in useful objects.\r\nHere is example request:\r\n\r\n```javascript\r\n\r\n    var fpg = new FPGate({\r\n        URL: 'https//localhost:8183/print/'\r\n        , Printer: new FPGPrinter({\r\n            ID:'MyPrinter'\r\n        })\r\n    });\r\n    var args = \r\n        'SON,Operator Name\\n' +\r\n        'STG,Product of tax group B,B,0.12,0\\n' +\r\n        'STG,Product of tax group A,A,0.25,0\\n' +\r\n        'PFT,Sample fiscal text\\n' +\r\n        'STL\\n' +\r\n        'TTL,Total:,CASH,2.00\\n' +\r\n        '';\r\n\r\n    fpg.sendRequest(new FPGRequest({\r\n        Command: 'PrintFiscalCheck'\r\n        , Arguments : args.split('\\\\n')\r\n        , onRequestComplete: function(data, textStatus) {\r\n            try {\r\n                try {\r\n                    if ('errors' in data) {\r\n                        for (var i in data.errors) \r\n                            alert('Error:'+data.errors[i]);\r\n                    }\t\r\n                } catch (err) {\r\n                    alert(err);\r\n                }\t\r\n                if ('resultTable' in data) {\r\n                    if ('CloseStatus' in data.resultTable && (data.resultTable.CloseStatus == '1')) {\r\n                        // LastPrintDocNum\r\n                        f['FPData[FPDocNum]'].value = ('LastPrintDocNum' in data.resultTable)?data.resultTable.LastPrintDocNum:'N/A';\r\n                        f['FPData[SerialNum]'].value = ('LFRI_DocNum' in data.resultTable)?data.resultTable.LFRI_DocNum:'N/A';\r\n                        // LFRI_DateTime\r\n                        f['FPData[FPDocDate]'].value = ('LFRI_DateTime' in data.resultTable)?data.resultTable.LFRI_DateTime:'';\r\n                        alert('SerialNum:'+f['FPData[SerialNum]'].value);\r\n                        alert('FPDocNum:'+f['FPData[FPDocNum]'].value);\r\n                        alert('FPDocDate:'+f['FPData[FPDocDate]'].value);\r\n                        f.submit();\r\n                    } else {\r\n                        alert('Operation completed successfully!');\r\n                    }\t\r\n                } else {\r\n                    alert('Missing Result!');\r\n                }\r\n            } catch (err) {\r\n                    alert(err);\r\n            }\t\r\n        }\r\n    }));\r\n```\r\n\r\nImplemented Commands\r\n====================\r\nFPGate Server supports following list of commands.\r\n\r\nPrintFiscalCheck and PrintNonFiscalCheck\r\n----------------------------------------\r\nThis command requesting printing of fiscal/non-fiscal check and accept as Arguments list of subcommands which generate content of fiscal check.\r\nEvery subcommand is string in the following format:\r\n*subcommand*[\\tParam...]\r\nWhere subcommand can be:\r\n\r\nSubcommand | Parameters                         | Description\r\n-----------|------------------------------------|-----------------------\r\nSON        |OperatorName                        | Set operator name\r\nPFT        |Text                                | Print Fiscal Text \r\nPNT        |Text                                | Print Nonfiscal Text \r\nPLF        |RowCount                            | Paper Line Feed\r\nSTG        |Text,TaxCode,Price,Percent,Quantity | Register Sell by Tax Group. Percent and Quantity are optional. Tax Code is Tax Group Abbreviation A,B,C...\r\nSDP        |Text,DepCode,Price,Percent,Quantity | Register Sell by Department. Percent and Quantity are optional. Department Code is programmed code of department.\r\nSTL        |ToPrint,ToDisplay,Percent           | Calculate subtotal. Parameters are optional.\r\nTTL        |Text,PaymentTypeAbbr,Amount         | Calc Total and prints the Text. PaymentTypeAbbr can be CASH,CREDIT,CHECK,DEBIT_CARD,CUSTOM1,CUSTOM2,CUSTOM3,CUSTOM4. Amount is Sum paid by customer.\r\nCMD        |Command,Params...                   | Call custom printer command, depending on printer model behavior will be different.\r\n\r\nPFT and PNT supports some simple formatting syntax in the following from.\r\n@padl\\tText[\\tPaddingSymbol] - Align text to the left and pad to the whole width with padding symbol (by default is space)\r\n@padr\\tText[\\tPaddingSymbol] - Align text to the right and pad to the whole width with padding symbol (by default is space)\r\n@padc\\tText[\\tPaddingSymbol] - Align text to the center and pad to the whole width with padding symbol (by default is space)\r\n@lval\\tLabel\\tValue - Align Label And Value.\r\n\r\nPrintDuplicateCheck\r\n-------------------\r\nPrints duplicate of last printed fiscal check. Can be executed only once.\r\nOnly one duplicate check can be printed.\r\n\r\nLastFiscalRecordInfo\r\n--------------------\r\nRequests last fiscal record info.\r\n\r\nReportDaily\r\n-----------\r\nRequest daily report. The commend accepts `ReportType` argument that selects desired report.\r\n`ReportType=X` Requests X Report\r\n`ReportType=Z` Requests Z Report\r\n\r\nReportByDates\r\n-------------\r\nPrints report by dates. The command accepts following arguments:\r\n`ReportType=DETAIL` Detailed report\r\n`ReportType=SHORT` Short report\r\n`FromDate=2015-07-01` From date in format yyyy-mm-dd\r\n`ToDate=2015-07-03` To date in format yyyy-mm-dd\r\n\r\nGetDateTime\r\n-----------\r\nGet printer date and time.\r\n\r\nSetDateTime\r\n-----------\r\nSet printer date and time. The command accepts optional argument `DateTime` where date and time is in following format 'yyyy-mm-dd HH:nn:ss'.\r\nIf `DateTime` argument is omitted the current date and time of system will be used.\r\n\r\nPrinterStatus\r\n-------------\r\nGet printer status information. The result is dependent of printer model.\r\n\r\nGetDiagnosticInfo\r\n-----------------\r\nGet printer diagnostic information. The result is dependent of printer model.\r\n\r\nGetJournalInfo\r\n--------------\r\nRequest journal information and return it. Available only if printer support it.\r\n\r\nGetJournal\r\n----------\r\nRequest printer journal return it. Available only if printer support it.\r\n\r\nCustomCommand\r\n-------------\r\nSends raw command to printer. The command accepts following arguments.\r\n`Cmd=CmdCode` and `Args=arguments`.\r\n\r\nAbnormalComplete\r\n----------------\r\nRequest printer to cancel all pending operations and returns it in ready state.\r\n\r\nTest\r\n----\r\nRequest testoperation on printer and returns result.\r\nResult depends on Printer Support class implementation. Mostly get diagnostic information is used.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}